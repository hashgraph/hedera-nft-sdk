{"version":3,"file":"index.js","names":["axios","getMirrorNodeUrlForNetwork","defaultWeights","keys","admin_key","wipe_key","freeze_key","supply_key","kyc_key","pause_key","fee_schedule_key","properties","supply_type_infinite","defaultRiskLevels","NORISK","LOW","MEDIUM","HIGH","calculateRiskScoreFromData","metadata","customWeights","customRiskLevels","riskScore","riskScoreFactors","calculateRiskScore","riskLevel","calculateRiskLevel","score","calculateRiskScoreFromTokenId","tokenId","network","localNodeURL","uri","Error","data","get","weights","key","typedKey","supply_type","Number","max_supply","total_supply","riskLevels"],"sources":["../../../src/risk/index.ts"],"sourcesContent":["/*\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport axios from 'axios';\nimport { Metadata, RiskResult, Weights, KeyTypes, RiskLevels, RiskLevel, RiskScoreFactors } from '../types/risk';\nimport { getMirrorNodeUrlForNetwork } from '../utils/hedera/get-mirror-node-url-for-network';\n\ntype Network = 'mainnet' | 'testnet' | 'previewnet' | 'localNode';\n\n// Default weights for risk score calculation\nconst defaultWeights: Weights = {\n  keys: {\n    admin_key: 200,\n    wipe_key: 200,\n    freeze_key: 50,\n    supply_key: 20,\n    kyc_key: 50,\n    pause_key: 50,\n    fee_schedule_key: 40,\n  },\n  properties: {\n    supply_type_infinite: 20,\n  },\n};\n\n// Default thresholds for risk level calculation\nconst defaultRiskLevels: RiskLevels = {\n  NORISK: 0,\n  LOW: 40,\n  MEDIUM: 199,\n  HIGH: 200,\n};\n\nconst calculateRiskScoreFromData = ({\n  metadata,\n  customWeights,\n  customRiskLevels,\n}: {\n  metadata: Metadata;\n  customWeights?: Weights;\n  customRiskLevels?: RiskLevels;\n}): RiskResult => {\n  const { riskScore, riskScoreFactors } = calculateRiskScore(metadata, customWeights);\n  const riskLevel = calculateRiskLevel({ score: riskScore, customRiskLevels });\n\n  return {\n    riskScore,\n    riskLevel,\n    riskScoreFactors,\n  };\n};\n\nconst calculateRiskScoreFromTokenId = async ({\n  tokenId,\n  network = 'mainnet',\n  localNodeURL,\n  customWeights,\n  customRiskLevels,\n}: {\n  tokenId: string;\n  network?: Network;\n  localNodeURL?: string;\n  customWeights?: Weights;\n  customRiskLevels?: RiskLevels;\n}): Promise<RiskResult> => {\n  let uri = '';\n\n  switch (network) {\n    case 'mainnet':\n      uri = `${getMirrorNodeUrlForNetwork('mainnet')}/tokens/${tokenId}/`;\n      break;\n    case 'testnet':\n      uri = `${getMirrorNodeUrlForNetwork('testnet')}/tokens/${tokenId}/`;\n      break;\n    case 'previewnet':\n      uri = `${getMirrorNodeUrlForNetwork('previewnet')}/tokens/${tokenId}/`;\n      break;\n    case 'localNode':\n      if (!localNodeURL) {\n        throw new Error('localNodeURL is required for local node network');\n      }\n      uri = `${localNodeURL}/api/v1/tokens/${tokenId}/`;\n      break;\n    default:\n      throw new Error('Invalid network');\n  }\n\n  const { data: metadata } = await axios.get<Metadata>(uri);\n\n  const { riskScore, riskScoreFactors } = calculateRiskScore(metadata, customWeights);\n  const riskLevel = calculateRiskLevel({ score: riskScore, customRiskLevels });\n\n  return {\n    riskScore,\n    riskLevel,\n    riskScoreFactors,\n  };\n};\n\nconst calculateRiskScore = (metadata: Metadata, customWeights?: Weights): { riskScore: number; riskScoreFactors: RiskScoreFactors } => {\n  const weights = customWeights ? customWeights : defaultWeights;\n  let riskScore = 0;\n  const riskScoreFactors: RiskScoreFactors = {};\n\n  // Iterate through the properties of the object\n  for (const key in metadata) {\n    const typedKey = key as KeyTypes;\n\n    // Check if the property is present in the weights object and not null\n    if (metadata[typedKey] && (typedKey as KeyTypes) in weights.keys) {\n      // If it is, add the associated risk weight to the risk score\n      riskScore += weights.keys[typedKey as KeyTypes];\n      riskScoreFactors[typedKey as KeyTypes] = weights.keys[typedKey as KeyTypes];\n    }\n  }\n\n  if (metadata.supply_type === 'INFINITE' && metadata.supply_key) {\n    riskScore += weights.properties.supply_type_infinite;\n    riskScoreFactors['supply_type_infinite_and_supply_key_defined'] = weights.properties.supply_type_infinite;\n  }\n\n  if (metadata.supply_type === 'FINITE' && Number(metadata.max_supply) == Number(metadata.total_supply)) {\n    riskScore -= weights.keys.supply_key;\n    riskScoreFactors['max_supply_equal_to_total_supply'] = -weights.keys.supply_key;\n  }\n\n  return { riskScore, riskScoreFactors };\n};\n\nconst calculateRiskLevel = ({ score, customRiskLevels }: { score: number; customRiskLevels?: RiskLevels }): RiskLevel => {\n  const riskLevels = customRiskLevels || defaultRiskLevels;\n\n  if (score <= riskLevels.NORISK) {\n    return 'NO RISK';\n  } else if (score <= riskLevels.LOW) {\n    return 'LOW';\n  } else if (score <= riskLevels.MEDIUM) {\n    return 'MEDIUM';\n  } else {\n    return 'HIGH';\n  }\n};\n\nexport {\n  defaultWeights,\n  defaultRiskLevels,\n  calculateRiskScoreFromData,\n  calculateRiskScoreFromTokenId,\n  calculateRiskLevel, // built-in in \"calculateRiskScore\" functions\n};\n"],"mappings":"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","ignoreList":[]}