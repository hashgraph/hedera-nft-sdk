{"version":3,"file":"index.js","names":["path","Validator","readFiles","getJSONFilesForDir","validateFiles","files","validationResults","validator","forEach","file","result","validate","filedata","filename","localValidation","relativePath","absolutePath","resolve","filenames"],"sources":["../../../src/local-validation/index.ts"],"sourcesContent":["/*\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport path from 'path';\nimport { Validator } from '../validator/index';\nimport { readFiles, getJSONFilesForDir } from '../helpers/files';\n\nimport { ValidationResult, Instance } from '../types/validator';\n\ninterface File {\n  filename: string;\n  filedata: Instance;\n}\n\ninterface ValidationResults {\n  [key: string]: ValidationResult;\n}\n\nconst validateFiles = (files: File[]): ValidationResults => {\n  const validationResults: ValidationResults = {};\n  const validator = new Validator();\n\n  files.forEach((file) => {\n    const result = validator.validate(file.filedata);\n    validationResults[file.filename] = result;\n  });\n\n  return validationResults;\n};\n\n/**\n * Validate files locally\n *\n * @param {string} relative Relative path to folder containing files\n * @returns {Object<filename<string>, validationResults<Object>>}\n */\nconst localValidation = (relativePath: string): ValidationResults => {\n  const absolutePath = path.resolve(relativePath); // convert relative path to absolute path\n  const filenames = getJSONFilesForDir(absolutePath);\n  const filedata = readFiles(absolutePath, filenames);\n  const validationResults = validateFiles(filedata);\n\n  return validationResults;\n};\n\nexport {\n  localValidation,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,SAAS,EAAEC,kBAAkB,QAAQ,kBAAkB;AAahE,MAAMC,aAAa,GAAIC,KAAa,IAAwB;EAC1D,MAAMC,iBAAoC,GAAG,CAAC,CAAC;EAC/C,MAAMC,SAAS,GAAG,IAAIN,SAAS,CAAC,CAAC;EAEjCI,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;IACtB,MAAMC,MAAM,GAAGH,SAAS,CAACI,QAAQ,CAACF,IAAI,CAACG,QAAQ,CAAC;IAChDN,iBAAiB,CAACG,IAAI,CAACI,QAAQ,CAAC,GAAGH,MAAM;EAC3C,CAAC,CAAC;EAEF,OAAOJ,iBAAiB;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,eAAe,GAAIC,YAAoB,IAAwB;EACnE,MAAMC,YAAY,GAAGhB,IAAI,CAACiB,OAAO,CAACF,YAAY,CAAC,CAAC,CAAC;EACjD,MAAMG,SAAS,GAAGf,kBAAkB,CAACa,YAAY,CAAC;EAClD,MAAMJ,QAAQ,GAAGV,SAAS,CAACc,YAAY,EAAEE,SAAS,CAAC;EACnD,MAAMZ,iBAAiB,GAAGF,aAAa,CAACQ,QAAQ,CAAC;EAEjD,OAAON,iBAAiB;AAC1B,CAAC;AAED,SACEQ,eAAe","ignoreList":[]}