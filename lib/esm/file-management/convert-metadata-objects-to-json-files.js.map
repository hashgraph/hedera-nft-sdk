{"version":3,"file":"convert-metadata-objects-to-json-files.js","names":["TokenMetadataValidator","saveMetadataObjectsAsJsonFiles","convertMetadataObjectsToJsonFiles","metadataObjects","savedJsonFilesLocation","limit","allObjectsValid","results","validateArrayOfObjects","objectsToProcess","undefined","length","slice","errorsDetailed","Object","entries","reduce","acc","index","errors","push","objectIndex","parseInt","isValid"],"sources":["../../../src/file-management/convert-metadata-objects-to-json-files.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { JsonMetadataFromCSVInterface } from '../types/json-metadata-from-csv';\nimport { TokenMetadataValidator } from '../token-metadata-validator';\nimport { MetadataObject } from '../types/csv';\nimport { saveMetadataObjectsAsJsonFiles } from '../helpers/save-metadata-object-as-json-files';\n\nexport const convertMetadataObjectsToJsonFiles = async ({\n  metadataObjects,\n  savedJsonFilesLocation,\n  limit,\n}: {\n  metadataObjects: MetadataObject[];\n  savedJsonFilesLocation: string;\n  limit?: number;\n}): Promise<JsonMetadataFromCSVInterface> => {\n  const { allObjectsValid, results } = TokenMetadataValidator.validateArrayOfObjects(metadataObjects);\n\n  if (allObjectsValid) {\n    const objectsToProcess = limit !== undefined && limit < metadataObjects.length ? metadataObjects.slice(0, limit) : metadataObjects;\n    saveMetadataObjectsAsJsonFiles(objectsToProcess, savedJsonFilesLocation);\n  }\n\n  // Prepare the error structure while maintaining the index of the metadata object and its error list for greater readability.\n  const errorsDetailed = Object.entries(results).reduce<{ objectIndex: number; errors: string[] }[]>((acc, [index, { errors }]) => {\n    if (errors.length > 0) {\n      acc.push({ objectIndex: parseInt(index), errors });\n    }\n    return acc;\n  }, []);\n\n  return {\n    isValid: allObjectsValid,\n    errors: errorsDetailed,\n    savedJsonFilesLocation,\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,sBAAsB,QAAQ,6BAA6B;AAEpE,SAASC,8BAA8B,QAAQ,+CAA+C;AAE9F,OAAO,MAAMC,iCAAiC,GAAG,MAAAA,CAAO;EACtDC,eAAe;EACfC,sBAAsB;EACtBC;AAKF,CAAC,KAA4C;EAC3C,MAAM;IAAEC,eAAe;IAAEC;EAAQ,CAAC,GAAGP,sBAAsB,CAACQ,sBAAsB,CAACL,eAAe,CAAC;EAEnG,IAAIG,eAAe,EAAE;IACnB,MAAMG,gBAAgB,GAAGJ,KAAK,KAAKK,SAAS,IAAIL,KAAK,GAAGF,eAAe,CAACQ,MAAM,GAAGR,eAAe,CAACS,KAAK,CAAC,CAAC,EAAEP,KAAK,CAAC,GAAGF,eAAe;IAClIF,8BAA8B,CAACQ,gBAAgB,EAAEL,sBAAsB,CAAC;EAC1E;;EAEA;EACA,MAAMS,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACR,OAAO,CAAC,CAACS,MAAM,CAA8C,CAACC,GAAG,EAAE,CAACC,KAAK,EAAE;IAAEC;EAAO,CAAC,CAAC,KAAK;IAC/H,IAAIA,MAAM,CAACR,MAAM,GAAG,CAAC,EAAE;MACrBM,GAAG,CAACG,IAAI,CAAC;QAAEC,WAAW,EAAEC,QAAQ,CAACJ,KAAK,CAAC;QAAEC;MAAO,CAAC,CAAC;IACpD;IACA,OAAOF,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLM,OAAO,EAAEjB,eAAe;IACxBa,MAAM,EAAEN,cAAc;IACtBT;EACF,CAAC;AACH,CAAC","ignoreList":[]}