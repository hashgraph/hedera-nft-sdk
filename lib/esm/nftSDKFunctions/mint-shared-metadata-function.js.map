{"version":3,"file":"mint-shared-metadata-function.js","names":["dictionary","validatePropsForSharedNFTMinting","MintingError","mintToken","mintSharedMetadataFunction","client","tokenId","amount","batchSize","metaData","supplyKey","mintedNFTs","numberOfCalls","Math","ceil","i","metadataBatchArray","Array","min","fill","mintTokenReceipt","result","serials","map","longValue","content","serialNumber","toNumber","push","flat","error","hederaActions","mintingError"],"sources":["../../../src/nftSDKFunctions/mint-shared-metadata-function.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { dictionary } from '../utils/constants/dictionary';\nimport { MintedNFTType, MintTokenType } from '../types/mint-token';\nimport { validatePropsForSharedNFTMinting } from '../utils/validate-props';\nimport { MintingError } from '../utils/minting-error';\nimport { mintToken } from './mint-token';\n\nexport const mintSharedMetadataFunction = async ({ client, tokenId, amount, batchSize, metaData, supplyKey }: MintTokenType) => {\n  validatePropsForSharedNFTMinting({ tokenId, amount, metaData, supplyKey, batchSize });\n\n  const mintedNFTs: MintedNFTType[] = [];\n  // Example if amount = 8 and batchSize = 5. NumberOfCalls should be 2. So 8/5 = 1.6. Math.ceil(1.6) = 2. Because Math.ceil rounds up to the next largest integer.\n  const numberOfCalls = Math.ceil(amount / batchSize);\n\n  try {\n    for (let i = 0; i < numberOfCalls; i++) {\n      const metadataBatchArray = new Array(Math.min(batchSize, amount)).fill(metaData);\n      amount -= batchSize;\n      const mintTokenReceipt = await mintToken(metadataBatchArray, tokenId, supplyKey, client);\n\n      const result: MintedNFTType[] = mintTokenReceipt?.serials.map((longValue) => {\n        return {\n          content: metaData,\n          serialNumber: longValue.toNumber(),\n        };\n      });\n\n      if (result) {\n        mintedNFTs.push(...result);\n      }\n    }\n\n    return mintedNFTs.flat();\n  } catch (error) {\n    throw new MintingError(`${dictionary.hederaActions.mintingError} ${error}`, mintedNFTs.flat());\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,+BAA+B;AAE1D,SAASC,gCAAgC,QAAQ,yBAAyB;AAC1E,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,SAAS,QAAQ,cAAc;AAExC,OAAO,MAAMC,0BAA0B,GAAG,MAAAA,CAAO;EAAEC,MAAM;EAAEC,OAAO;EAAEC,MAAM;EAAEC,SAAS;EAAEC,QAAQ;EAAEC;AAAyB,CAAC,KAAK;EAC9HT,gCAAgC,CAAC;IAAEK,OAAO;IAAEC,MAAM;IAAEE,QAAQ;IAAEC,SAAS;IAAEF;EAAU,CAAC,CAAC;EAErF,MAAMG,UAA2B,GAAG,EAAE;EACtC;EACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,IAAI,CAACP,MAAM,GAAGC,SAAS,CAAC;EAEnD,IAAI;IACF,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,aAAa,EAAEG,CAAC,EAAE,EAAE;MACtC,MAAMC,kBAAkB,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAACK,GAAG,CAACV,SAAS,EAAED,MAAM,CAAC,CAAC,CAACY,IAAI,CAACV,QAAQ,CAAC;MAChFF,MAAM,IAAIC,SAAS;MACnB,MAAMY,gBAAgB,GAAG,MAAMjB,SAAS,CAACa,kBAAkB,EAAEV,OAAO,EAAEI,SAAS,EAAEL,MAAM,CAAC;MAExF,MAAMgB,MAAuB,GAAGD,gBAAgB,EAAEE,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAK;QAC3E,OAAO;UACLC,OAAO,EAAEhB,QAAQ;UACjBiB,YAAY,EAAEF,SAAS,CAACG,QAAQ,CAAC;QACnC,CAAC;MACH,CAAC,CAAC;MAEF,IAAIN,MAAM,EAAE;QACVV,UAAU,CAACiB,IAAI,CAAC,GAAGP,MAAM,CAAC;MAC5B;IACF;IAEA,OAAOV,UAAU,CAACkB,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAI5B,YAAY,CAAE,GAAEF,UAAU,CAAC+B,aAAa,CAACC,YAAa,IAAGF,KAAM,EAAC,EAAEnB,UAAU,CAACkB,IAAI,CAAC,CAAC,CAAC;EAChG;AACF,CAAC","ignoreList":[]}