{"version":3,"file":"index.js","names":["readFiles","getJSONFilesForDir","getNftMetadataFromCollection","dictionary","calculateRarity","dir","filenames","files","attributesMap","getAttributeMap","normalizedRarities","normalizedCount","forEach","file","traitRarities","filedata","attributes","NFTAttribute","display_type","push","trait","trait_type","value","rarity","attributeConfigObject","find","attribute","Error","errors","attributeTypeNotFound","NFTsWithTrait","values","valueObject","mostCommonTrait","reduce","prev","current","count","traitRarity","totalRarity","attributeContributions","map","contribution","toFixed","NFT","filename","attributeNotFoundInFile","matchedAttributeIndex","findIndex","attributeObject","matchedValueIndex","toString","getAttributeMapData","metadataArray","metadata","attributeNotFoundInObject","JSON","stringify","Array","isArray","calculateRarityFromData","calculateTraitOccurrenceFromData","traitOccurrences","traitOccurrence","occurence","length","calculateRarityFromOnChainData","network","tokenId","ipfsGateway","limit","metadataObjects","filteredArray","obj","filter","item","undefined"],"sources":["../../../src/rarity/index.ts"],"sourcesContent":["/**\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { readFiles, getJSONFilesForDir } from '../helpers/files';\nimport { RarityResult, AttributeConfig, ValueObject, NFTFile, TraitOccurrence } from '../types/rarity';\nimport { Attribute } from '../types/validator';\nimport { NFTMetadata } from '../types/nft-metadata';\nimport { NetworkName } from '@hashgraph/sdk/lib/client/Client';\nimport { getNftMetadataFromCollection } from '../helpers/get-nft-metadatas-from-collection';\nimport { dictionary } from '../utils/constants/dictionary';\nimport { MetadataObject } from '../types/csv';\n\n/**\n *\n * @param {string} dir Absolute path to folder with metadata files for rarity calculation\n * @return {RarityResult[]} Array of objects with rarity information for each NFT\n */\nconst calculateRarity = (dir: string): RarityResult[] => {\n  const filenames = getJSONFilesForDir(dir);\n  const files = readFiles(dir, filenames);\n\n  const attributesMap = getAttributeMap(files);\n\n  const normalizedRarities: RarityResult[] = [];\n  let normalizedCount = 1;\n  files.forEach((file) => {\n    const traitRarities: { trait: string; value: string | number; rarity: number }[] = [];\n\n    file.filedata.attributes.forEach((NFTAttribute: Attribute) => {\n      // Skip special types of attributes in the rarity calculation (Openrarity specification)\n      if (\n        NFTAttribute.display_type == 'percentage' ||\n        NFTAttribute.display_type == 'boost' ||\n        NFTAttribute.display_type == 'color' ||\n        NFTAttribute.display_type == 'datetime' ||\n        NFTAttribute.display_type == 'boolean'\n      ) {\n        return traitRarities.push({\n          trait: NFTAttribute.trait_type,\n          value: NFTAttribute.value,\n          rarity: 0,\n        });\n      }\n\n      const attributeConfigObject: AttributeConfig | undefined = attributesMap.find(\n        (attribute) => attribute.trait_type === NFTAttribute.trait_type\n      );\n\n      if (!attributeConfigObject) throw new Error(dictionary.errors.rarity.attributeTypeNotFound(NFTAttribute.trait_type));\n      const NFTsWithTrait: ValueObject | undefined = attributeConfigObject.values.find(\n        (valueObject) => valueObject.value === NFTAttribute.value\n      );\n      const mostCommonTrait = attributeConfigObject.values.reduce((prev, current) => (prev.count > current.count ? prev : current));\n      const traitRarity = 1 / (NFTsWithTrait?.count! / mostCommonTrait.count);\n\n      return traitRarities.push({\n        trait: NFTAttribute.trait_type,\n        value: NFTAttribute.value,\n        rarity: traitRarity,\n      });\n    });\n\n    const totalRarity = traitRarities.reduce((prev, current) => prev + current.rarity, 0);\n    const attributeContributions = traitRarities.map((traitRarity) => ({\n      trait: traitRarity.trait,\n      value: traitRarity.value,\n      contribution: ((traitRarity.rarity / totalRarity) * 100).toFixed(2),\n    }));\n\n    normalizedRarities.push({\n      attributeContributions: attributeContributions,\n      totalRarity: totalRarity.toFixed(2),\n      NFT: normalizedCount,\n      filename: file.filename,\n    });\n    normalizedCount++;\n  });\n\n  return normalizedRarities;\n};\n\n/**\n * @param {NFTFile[]} files Array of NFTFile objects\n * @return {AttributeConfig[]} Array of objects with attribute information\n * */\nconst getAttributeMap = (files: NFTFile[]): AttributeConfig[] => {\n  const attributesMap: AttributeConfig[] = [];\n  files.forEach((file) => {\n    if (!file.filedata.attributes) throw new Error(dictionary.errors.rarity.attributeNotFoundInFile(file.filename));\n\n    file.filedata.attributes.forEach((attribute: Attribute) => {\n      const matchedAttributeIndex = attributesMap.findIndex((attributeObject) => attribute.trait_type === attributeObject.trait_type);\n      if (matchedAttributeIndex !== -1) {\n        const matchedValueIndex = attributesMap[matchedAttributeIndex].values.findIndex(\n          (valueObject) => valueObject.value === attribute.value\n        );\n\n        if (matchedValueIndex !== -1) {\n          attributesMap[matchedAttributeIndex].values[matchedValueIndex].count++;\n        } else {\n          attributesMap[matchedAttributeIndex].values.push({\n            value: attribute.value.toString(),\n            count: 1,\n          });\n        }\n      } else {\n        attributesMap.push({\n          trait_type: attribute.trait_type,\n          values: [{ value: attribute.value.toString(), count: 1 }],\n        });\n      }\n    });\n  });\n\n  return attributesMap;\n};\n\n/**\n * @return {AttributeConfig[]} Array of objects with attribute information\n * @param metadataArray\n * */\nconst getAttributeMapData = (metadataArray: MetadataObject[] | NFTMetadata[]): AttributeConfig[] => {\n  const attributesMap: AttributeConfig[] = [];\n  metadataArray.forEach((metadata) => {\n    if (!metadata.attributes) throw new Error(dictionary.errors.rarity.attributeNotFoundInObject(JSON.stringify(metadata)));\n    if (Array.isArray(metadata.attributes)) {\n      metadata.attributes.forEach((attribute) => {\n        const matchedAttributeIndex = attributesMap.findIndex((attributeObject) => attribute.trait_type === attributeObject.trait_type);\n        if (matchedAttributeIndex !== -1) {\n          const matchedValueIndex = attributesMap[matchedAttributeIndex].values.findIndex(\n            (valueObject) => valueObject.value === attribute.value\n          );\n\n          if (matchedValueIndex !== -1) {\n            attributesMap[matchedAttributeIndex].values[matchedValueIndex].count++;\n          } else {\n            attributesMap[matchedAttributeIndex].values.push({\n              value: attribute.value?.toString() || '',\n              count: 1,\n            });\n          }\n        } else {\n          attributesMap.push(<AttributeConfig>{\n            trait_type: attribute.trait_type,\n            values: [{ value: attribute.value?.toString(), count: 1 }],\n          });\n        }\n      });\n    }\n  });\n\n  return attributesMap;\n};\n\n/**\n *\n * @param {Array<Object>} metadataArray Array of JSON objects for rarity calculation\n * @return {RarityResult[]} Array of objects with rarity information for each NFT\n */\nconst calculateRarityFromData = (metadataArray: MetadataObject[] | NFTMetadata[]): RarityResult[] => {\n  const attributesMap = getAttributeMapData(metadataArray);\n\n  const normalizedRarities: RarityResult[] = [];\n  let normalizedCount = 1;\n  metadataArray.forEach((metadata) => {\n    const traitRarities: { trait: string; value: string | number; rarity: number }[] = [];\n    if (Array.isArray(metadata.attributes)) {\n      metadata.attributes?.forEach((NFTAttribute) => {\n        const attributeConfigObject: AttributeConfig | undefined = attributesMap.find(\n          (attribute) => attribute.trait_type === NFTAttribute.trait_type\n        );\n\n        if (!attributeConfigObject)\n          throw new Error(dictionary.errors.rarity.attributeTypeNotFound(NFTAttribute.trait_type?.toString() || ''));\n        const NFTsWithTrait: ValueObject | undefined = attributeConfigObject.values.find(\n          (valueObject) => valueObject.value === NFTAttribute.value\n        );\n        const mostCommonTrait = attributeConfigObject.values.reduce((prev, current) => (prev.count > current.count ? prev : current));\n        const traitRarity = 1 / (NFTsWithTrait?.count! / mostCommonTrait.count);\n\n        traitRarities.push({\n          trait: NFTAttribute.trait_type?.toString() || '',\n          value: NFTAttribute.value?.toString() || '',\n          rarity: traitRarity,\n        });\n      });\n    }\n\n    const totalRarity = traitRarities.reduce((prev, current) => prev + current.rarity, 0);\n    const attributeContributions = traitRarities.map((traitRarity) => ({\n      trait: traitRarity.trait,\n      value: traitRarity.value,\n      contribution: ((traitRarity.rarity / totalRarity) * 100).toFixed(2),\n    }));\n\n    normalizedRarities.push({\n      attributeContributions: attributeContributions,\n      totalRarity: totalRarity.toFixed(2),\n      NFT: normalizedCount,\n    });\n    normalizedCount++;\n  });\n\n  return normalizedRarities;\n};\n\nconst calculateTraitOccurrenceFromData = (metadataArray: MetadataObject[]): TraitOccurrence[] => {\n  const attributesMap = getAttributeMapData(metadataArray);\n\n  const traitOccurrences: TraitOccurrence[] = [];\n\n  attributesMap.forEach((attribute) => {\n    const traitOccurrence: TraitOccurrence = {\n      trait: attribute.trait_type,\n      values: [],\n    };\n\n    attribute.values.forEach((value) => {\n      traitOccurrence.values.push({\n        value: value.value,\n        occurence: ((value.count / metadataArray.length) * 100).toFixed(2),\n      });\n    });\n\n    traitOccurrences.push(traitOccurrence);\n  });\n\n  return traitOccurrences;\n};\n\nconst calculateRarityFromOnChainData = async (network: NetworkName, tokenId: string, ipfsGateway?: string, limit: number = 100) => {\n  const metadataObjects = await getNftMetadataFromCollection(network, tokenId, limit, ipfsGateway);\n\n  const filteredArray = metadataObjects.map((obj) => obj.metadata).filter((item): item is NFTMetadata => item !== undefined);\n\n  return calculateRarityFromData(filteredArray);\n};\n\nexport { calculateRarity, calculateRarityFromData, calculateTraitOccurrenceFromData, calculateRarityFromOnChainData };\n"],"mappings":"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","ignoreList":[]}