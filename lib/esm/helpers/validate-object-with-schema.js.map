{"version":3,"file":"validate-object-with-schema.js","names":["dictionary","filter","keys","generateErrorMessage","ValidationError","noPropertiesErrorOptions","prefix","delimiter","error","message","enabled","transform","value","path","messageComponent","propertiesErrorOptions","type","label","code","component","errorMessage","validationMetadataErrorOptions","validateObjectWithSchema","Schema","object","errorMessageOptions","validation","safeParse","success","errorMessages","issues","map","issue","parsedObjectWithSchema","parse","overPropertiesFromObjectWhichAreNotInSchema","key","includes","length","Error","invalidKeysDetected"],"sources":["../../../src/helpers/validate-object-with-schema.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { dictionary } from '../utils/constants/dictionary';\nimport filter from 'lodash/filter';\nimport keys from 'lodash/keys';\nimport { type z } from 'zod';\nimport type { ErrorMessageOptions } from 'zod-error';\nimport { generateErrorMessage } from 'zod-error';\nimport { ValidationError } from '../utils/validation-error';\n\nexport const noPropertiesErrorOptions: ErrorMessageOptions = {\n  prefix: '',\n  delimiter: {\n    error: '\\n',\n  },\n  message: {\n    enabled: true,\n    transform: ({ value }) => value,\n  },\n  path: {\n    enabled: false,\n  },\n  transform: ({ messageComponent }) => messageComponent,\n};\n\nexport const propertiesErrorOptions: ErrorMessageOptions = {\n  prefix: '',\n  path: {\n    type: 'breadcrumbs',\n    enabled: true,\n    label: 'Invalid',\n    transform: ({ label, value }) => `${label} \"${value}\".`,\n  },\n  code: {\n    enabled: false,\n  },\n  delimiter: {\n    component: ' ',\n    error: '',\n  },\n  transform: ({ errorMessage }) => `${errorMessage}\\n`,\n};\n\nexport const validationMetadataErrorOptions: ErrorMessageOptions = {\n  prefix: '',\n  path: {\n    type: 'breadcrumbs',\n    enabled: true,\n    label: 'The required',\n    transform: ({ label, value }) => `${label} \"${value}\" field is missing.`,\n  },\n  code: {\n    enabled: false,\n  },\n  delimiter: {\n    component: ' ',\n    error: '',\n  },\n  message: { enabled: false },\n  transform: ({ errorMessage }) => errorMessage,\n};\n\nexport const validateObjectWithSchema = <T extends { [key: string]: string | unknown }>(\n  Schema: z.ZodSchema<T>,\n  object: z.infer<z.ZodSchema<T | unknown>>,\n  errorMessageOptions = noPropertiesErrorOptions\n): T => {\n  const validation = Schema.safeParse(object);\n  if (!validation.success) {\n    const errorMessages = validation.error.issues.map((issue) => generateErrorMessage([issue], errorMessageOptions));\n\n    throw new ValidationError(errorMessages);\n  }\n\n  const parsedObjectWithSchema = Schema.parse(object);\n  const overPropertiesFromObjectWhichAreNotInSchema = filter(keys(object), (key) => !keys(parsedObjectWithSchema).includes(key));\n\n  if (overPropertiesFromObjectWhichAreNotInSchema.length > 0) {\n    throw new Error(dictionary.validation.invalidKeysDetected(overPropertiesFromObjectWhichAreNotInSchema));\n  }\n\n  return object as z.infer<z.ZodSchema<T>>;\n};\n"],"mappings":"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","ignoreList":[]}