{"version":3,"file":"attributes.js","names":["attributesValidator","instance","attributes","errors","matchRGBColors","map","attribute","display_type","value","push","type","msg","trait_type","exec","RGBValues","match","rgbVal","parseInt","Number","isInteger"],"sources":["../../../../src/validator/validators/attributes.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Instance, Error } from '../../types/validator';\n\n/**\n * The attributes validator applies specific rules for attribute objects\n * such as validating the values for different display types.\n * If the \"attributes\" property is not present (optional field), no errors are returned.\n *\n * @see https://github.com/hashgraph/hedera-improvement-proposal/blob/main/HIP/hip-412.md#attributesdisplay_type\n *\n * @param {Object} instance - The JSON object to validate against a schema\n * @returns {Array} - Contains no, one, or multiple error objects that describe errors for the validated {instance}\n */\nconst attributesValidator = (instance: Instance): Error[] => {\n  const attributes = instance.attributes;\n  const errors: Error[] = [];\n  const matchRGBColors = /rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)/; // Match string \"rgb(102,250,1)\" and variations\n\n  if (!attributes) return errors; // attributes is an optional field\n\n  attributes.map((attribute) => {\n    // Boost must be number value\n    if (attribute.display_type === 'boost' && typeof attribute.value !== 'number') {\n      errors.push({\n        type: 'attribute',\n        msg: `Trait ${attribute.trait_type} of type 'boost' requires number, found ${typeof attribute.value}`,\n      });\n    }\n\n    // Percentage between [0-100]\n    if (attribute.display_type === 'percentage') {\n      if (typeof attribute.value !== 'number') {\n        errors.push({\n          type: 'attribute',\n          msg: `Trait ${attribute.trait_type} of type 'percentage' requires number, found ${typeof attribute.value}`,\n        });\n      } else if (attribute.value < 0 || attribute.value > 100) {\n        errors.push({\n          type: 'attribute',\n          msg: `Trait ${attribute.trait_type} of type 'percentage' must be between [0-100], found ${attribute.value}`,\n        });\n      }\n    }\n\n    // Check for RGB format and values between[0-255]\n    if (attribute.display_type === 'color') {\n      if (matchRGBColors.exec(attribute.value as string) === null) {\n        // format validation\n        errors.push({\n          type: 'attribute',\n          msg: `Trait ${attribute.trait_type} of type 'color' requires format 'rgb(number,number,number)'`,\n        });\n      } else {\n        // value validation range [0-255]\n        const RGBValues = (attribute.value as string).match(/\\d+/g);\n        if (!RGBValues) return;\n        RGBValues.map((rgbVal: string) => {\n          if (parseInt(rgbVal) < 0 || parseInt(rgbVal) > 255) {\n            errors.push({\n              type: 'attribute',\n              msg: `Trait ${attribute.trait_type} of type 'color' requires RGB values between [0-255], got value: ${rgbVal}`,\n            });\n          }\n        });\n      }\n    }\n\n    // Check datetime format: should be integer e.g. 732844800\n    if ((attribute.display_type === 'datetime' || attribute.display_type === 'date') && !Number.isInteger(attribute.value as number)) {\n      errors.push({\n        type: 'attribute',\n        msg: `Trait ${attribute.trait_type} of type '${\n          attribute.display_type\n        }' requires integer value, got type: ${typeof attribute.value}`,\n      });\n    }\n  });\n\n  return errors;\n};\n\nexport { attributesValidator };\n"],"mappings":"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","ignoreList":[]}