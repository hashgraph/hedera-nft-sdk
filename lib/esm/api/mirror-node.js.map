{"version":3,"file":"mirror-node.js","names":["axios","dictionary","errorToMessage","getMirrorNodeUrlForNetwork","getMetaDataFromMirrorNode","network","nftId","mirrorNodeUrl","url","response","get","tokenId","toString","serial","atob","data","metadata","getLastOwnershipTransferForNft","serialNumber","baseUrl","nextLink","requiredTransaction","transactions","find","transaction","type","links","next","URL","href","error","Error","getNFTsFromToken","limit","allNFTs","push","nfts","getSingleNFTDetails","nftURL","errors","unknownErrorWhileFetching","getMetadataObjectsForValidation","isSuccessful","errorMessage","ipfsFailedToFetch","isAxiosError","status","tooManyRequests","statusText"],"sources":["../../../src/api/mirror-node.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { NftId } from '@hashgraph/sdk';\nimport axios from 'axios';\nimport { NFTDetails, NFTS, NFTTransactions, NFTTransactionsRequest } from '../types/nfts';\nimport { dictionary } from '../utils/constants/dictionary';\nimport { errorToMessage } from '../helpers/error-to-message';\nimport { NetworkName } from '@hashgraph/sdk/lib/client/Client';\nimport { getMirrorNodeUrlForNetwork } from '../utils/hedera/get-mirror-node-url-for-network';\nimport { MetadataObject } from '../types/csv';\nimport { NFTMetadata } from '../types/nft-metadata';\n\nexport type MetadataFromMirrorNode = {\n  isSuccessful: boolean;\n  metadata?: MetadataObject | NFTMetadata;\n  serialNumber: number;\n  error?: string;\n};\n\nexport const getMetaDataFromMirrorNode = async (network: NetworkName, nftId: NftId, mirrorNodeUrl?: string): Promise<string> => {\n  const url = mirrorNodeUrl || getMirrorNodeUrlForNetwork(network);\n  const response = await axios.get(`${url}/tokens/${nftId.tokenId.toString()}/nfts/${nftId.serial.toString()}`);\n  return atob(response.data.metadata);\n};\n\nexport const getLastOwnershipTransferForNft = async (\n  network: NetworkName,\n  tokenId: string,\n  serialNumber: number,\n  mirrorNodeUrl?: string\n): Promise<NFTTransactions | undefined> => {\n  const baseUrl = mirrorNodeUrl || getMirrorNodeUrlForNetwork(network);\n  let nextLink: string = `${baseUrl}/tokens/${tokenId}/nfts/${serialNumber}/transactions`;\n  let requiredTransaction: NFTTransactions | undefined;\n\n  do {\n    try {\n      const response = await axios.get<NFTTransactionsRequest>(nextLink);\n      // We take the first 'CRYPTOTRANSFER' or 'TOKENMINT' transaction because these transactions represent the change of ownership of an NFT.\n      // 'CRYPTOTRANSFER' indicates that the NFT was transferred from one account to another, while 'TOKENMINT' indicates that a new NFT was minted.\n      // By taking the first of these transactions, we can determine the last owner of the NFT and the time when they became the owner\n      requiredTransaction = response.data.transactions.find(\n        (transaction) => transaction.type === 'CRYPTOTRANSFER' || transaction.type === 'TOKENMINT'\n      );\n      if (requiredTransaction) break;\n      nextLink = response.data.links.next ? new URL(response.data.links.next, baseUrl).href : '';\n    } catch (error) {\n      throw new Error(errorToMessage(error));\n    }\n  } while (nextLink);\n  return requiredTransaction;\n};\n\nexport async function getNFTsFromToken(network: NetworkName, tokenId: string, limit: number = 100): Promise<NFTDetails[]> {\n  const baseUrl = getMirrorNodeUrlForNetwork(network);\n  let nextLink: string = `${baseUrl}/tokens/${tokenId}/nfts?limit=${limit}`;\n  const allNFTs: NFTDetails[] = [];\n\n  do {\n    try {\n      const response = await axios.get<NFTS>(nextLink);\n      allNFTs.push(...response.data.nfts);\n      nextLink = response.data.links.next ? new URL(response.data.links.next, baseUrl).href : '';\n    } catch (error) {\n      throw new Error(errorToMessage(error));\n    }\n  } while (nextLink);\n  return allNFTs;\n}\n\nexport async function getSingleNFTDetails(network: NetworkName, tokenId: string, serialNumber: number): Promise<NFTDetails> {\n  const baseUrl = getMirrorNodeUrlForNetwork(network);\n  const nftURL = `${baseUrl}/tokens/${tokenId}/nfts/${serialNumber}`;\n\n  try {\n    const { data } = await axios.get<NFTDetails>(nftURL);\n    return data;\n  } catch (error) {\n    throw new Error(`${dictionary.errors.unknownErrorWhileFetching(serialNumber)},\n    ${errorToMessage(error)}`);\n  }\n}\n\nexport async function getMetadataObjectsForValidation(url: string, serialNumber: number): Promise<MetadataFromMirrorNode> {\n  try {\n    const response = await axios.get(url);\n    return {\n      isSuccessful: true,\n      metadata: response.data,\n      serialNumber,\n    };\n  } catch (error) {\n    let errorMessage = dictionary.errors.ipfsFailedToFetch as string;\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 429) {\n        errorMessage = dictionary.errors.tooManyRequests(error.response.statusText, error.response.status);\n      } else {\n        errorMessage = dictionary.errors.unknownErrorWhileFetching(serialNumber);\n      }\n    }\n\n    return {\n      isSuccessful: false,\n      serialNumber,\n      error: errorMessage,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}