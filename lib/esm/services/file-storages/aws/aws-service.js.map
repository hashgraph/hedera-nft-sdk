{"version":3,"file":"aws-service.js","names":["dictionary","filetypename","errorToMessage","S3Client","Upload","AWSService","constructor","awsAccessKeyId","awsSecretAccessKey","awsS3Region","awsS3Bucket","client","credentials","accessKeyId","secretAccessKey","region","uploadFile","file","buffer","Uint8Array","arrayBuffer","fileTypeFromBufferInstance","fileName","Date","now","toString","res","params","ACL","Bucket","Key","Body","ContentType","type","tags","queueSize","partSize","leavePartsOnError","resDone","done","Location","Error","errors","awsUploadIssue","error","awsUploadingError"],"sources":["../../../../../src/services/file-storages/aws/aws-service.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport type { Blob } from 'buffer';\nimport { dictionary } from '../../../utils/constants/dictionary';\nimport { filetypename } from 'magic-bytes.js';\nimport { errorToMessage } from '../../../helpers/error-to-message';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { FileStorage } from '../../../types/file-storage-service';\n\nexport class AWSService implements FileStorage {\n  public client: S3Client;\n  public awsAccessKeyId?: string;\n  public awsSecretAccessKey?: string;\n  public awsS3Region?: string;\n  public awsS3Bucket?: string;\n\n  constructor(awsAccessKeyId: string, awsSecretAccessKey: string, awsS3Region: string, awsS3Bucket: string) {\n    this.awsAccessKeyId = awsAccessKeyId;\n    this.awsSecretAccessKey = awsSecretAccessKey;\n    this.awsS3Region = awsS3Region;\n    this.awsS3Bucket = awsS3Bucket;\n\n    this.client = new S3Client({\n      credentials: {\n        accessKeyId: this.awsAccessKeyId,\n        secretAccessKey: this.awsSecretAccessKey,\n      },\n      region: this.awsS3Region,\n    });\n  }\n\n  public async uploadFile(file: Blob): Promise<string> {\n    const buffer = new Uint8Array(await file.arrayBuffer());\n    const fileTypeFromBufferInstance = filetypename(buffer);\n\n    const fileName = `${Date.now().toString()}.${fileTypeFromBufferInstance[0] ?? 'json'}`;\n\n    try {\n      const res = new Upload({\n        client: this.client,\n        params: {\n          ACL: 'public-read',\n          Bucket: this.awsS3Bucket,\n          Key: fileName,\n          Body: buffer,\n          ContentType: file.type || 'application/octet-stream', // Set the Content-Type header\n        },\n        tags: [],\n        queueSize: 4,\n        partSize: 1024 * 1024 * 5, // Maximum part size is 5MB\n        leavePartsOnError: false, // optional manually handle dropped parts\n      });\n\n      const resDone = await res.done();\n\n      if (!resDone || !resDone.Location) {\n        throw new Error(dictionary.errors.awsUploadIssue);\n      }\n\n      return resDone.Location;\n    } catch (error) {\n      throw new Error(dictionary.errors.awsUploadingError(errorToMessage(error)));\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,qCAAqC;AAChE,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,cAAc,QAAQ,mCAAmC;AAClE,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,MAAM,QAAQ,sBAAsB;AAG7C,OAAO,MAAMC,UAAU,CAAwB;EAO7CC,WAAWA,CAACC,cAAsB,EAAEC,kBAA0B,EAAEC,WAAmB,EAAEC,WAAmB,EAAE;IACxG,IAAI,CAACH,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACC,MAAM,GAAG,IAAIR,QAAQ,CAAC;MACzBS,WAAW,EAAE;QACXC,WAAW,EAAE,IAAI,CAACN,cAAc;QAChCO,eAAe,EAAE,IAAI,CAACN;MACxB,CAAC;MACDO,MAAM,EAAE,IAAI,CAACN;IACf,CAAC,CAAC;EACJ;EAEA,MAAaO,UAAUA,CAACC,IAAU,EAAmB;IACnD,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,MAAMF,IAAI,CAACG,WAAW,CAAC,CAAC,CAAC;IACvD,MAAMC,0BAA0B,GAAGpB,YAAY,CAACiB,MAAM,CAAC;IAEvD,MAAMI,QAAQ,GAAI,GAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAE,IAAGJ,0BAA0B,CAAC,CAAC,CAAC,IAAI,MAAO,EAAC;IAEtF,IAAI;MACF,MAAMK,GAAG,GAAG,IAAItB,MAAM,CAAC;QACrBO,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBgB,MAAM,EAAE;UACNC,GAAG,EAAE,aAAa;UAClBC,MAAM,EAAE,IAAI,CAACnB,WAAW;UACxBoB,GAAG,EAAER,QAAQ;UACbS,IAAI,EAAEb,MAAM;UACZc,WAAW,EAAEf,IAAI,CAACgB,IAAI,IAAI,0BAA0B,CAAE;QACxD,CAAC;QACDC,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE,CAAC;QACZC,QAAQ,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC;QAAE;QAC3BC,iBAAiB,EAAE,KAAK,CAAE;MAC5B,CAAC,CAAC;MAEF,MAAMC,OAAO,GAAG,MAAMZ,GAAG,CAACa,IAAI,CAAC,CAAC;MAEhC,IAAI,CAACD,OAAO,IAAI,CAACA,OAAO,CAACE,QAAQ,EAAE;QACjC,MAAM,IAAIC,KAAK,CAACzC,UAAU,CAAC0C,MAAM,CAACC,cAAc,CAAC;MACnD;MAEA,OAAOL,OAAO,CAACE,QAAQ;IACzB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAM,IAAIH,KAAK,CAACzC,UAAU,CAAC0C,MAAM,CAACG,iBAAiB,CAAC3C,cAAc,CAAC0C,KAAK,CAAC,CAAC,CAAC;IAC7E;EACF;AACF","ignoreList":[]}