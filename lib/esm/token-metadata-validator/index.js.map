{"version":3,"file":"index.js","names":["fs","path","Hip412MetadataSchema","validateObjectWithSchema","validationMetadataErrorOptions","errorToMessage","dictionary","getMetadataObjectsForValidation","getSingleNFTDetails","uriDecoder","ValidationError","getNftMetadataFromCollection","TokenMetadataValidator","validateSingleMetadataObject","object","errors","err","push","isValid","length","validateArrayOfObjects","metadataObjects","results","allObjectsValid","forEach","metadataObject","index","e","errorMessage","errorsCount","map","error","validateLocalFile","filePath","fileContent","readFileSync","JSON","parse","validateLocalDirectory","directoryPath","filesForValidation","readdirSync","filter","file","endsWith","sort","a","b","numA","parseInt","match","numB","general","validation","directoryIsEmpty","join","validationResult","fileName","validateOnChainArrayOfObjects","obj","serialNumber","message","metadata","validateMetadataFromOnChainCollection","network","tokenId","ipfsGateway","limit","validateSingleOnChainNFTMetadata","nft","decodedNFTMetadataURL","missingAttributes"],"sources":["../../../src/token-metadata-validator/index.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport path from 'path';\nimport { NetworkName } from '@hashgraph/sdk/lib/client/Client';\nimport { Hip412MetadataSchema } from '../utils/validation-schemas/hip412-metadata-schema';\nimport { validateObjectWithSchema, validationMetadataErrorOptions } from '../helpers/validate-object-with-schema';\nimport { errorToMessage } from '../helpers/error-to-message';\nimport { MetadataObject } from '../types/csv';\nimport { dictionary } from '../utils/constants/dictionary';\nimport { getMetadataObjectsForValidation, getSingleNFTDetails, MetadataFromMirrorNode } from '../api/mirror-node';\nimport { uriDecoder } from '../helpers/uri-decoder';\nimport { ValidationError } from '../utils/validation-error';\nimport { getNftMetadataFromCollection } from '../helpers/get-nft-metadatas-from-collection';\nimport { NFTMetadata } from '../types/nft-metadata';\nimport {\n  FileValidationResult,\n  DetailedFileValidationResult,\n  ValidateArrayOfObjectsResult,\n  DirectoryValidationResult,\n  MetadataError,\n} from '../types/hip412-validator';\n\nexport class TokenMetadataValidator {\n  static validateSingleMetadataObject(object: MetadataObject | NFTMetadata): FileValidationResult {\n    const errors: string[] = [];\n\n    try {\n      validateObjectWithSchema(Hip412MetadataSchema, object, validationMetadataErrorOptions);\n    } catch (err) {\n      if (err instanceof ValidationError) {\n        errors.push(...err.errors);\n      } else {\n        errors.push(errorToMessage(err));\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  static validateArrayOfObjects(metadataObjects: MetadataObject[]): ValidateArrayOfObjectsResult {\n    const results: { [index: number]: DetailedFileValidationResult } = {};\n    let allObjectsValid = true;\n\n    metadataObjects.forEach((metadataObject, index) => {\n      const errors: string[] = [];\n      try {\n        validateObjectWithSchema(Hip412MetadataSchema, metadataObject, validationMetadataErrorOptions);\n      } catch (e) {\n        allObjectsValid = false;\n        const errorMessage = errorToMessage(e);\n        if (e instanceof ValidationError) {\n          errors.push(...e.errors);\n        } else {\n          errors.push(errorMessage);\n        }\n      }\n      results[index] = {\n        isValid: errors.length === 0,\n        errorsCount: errors.length,\n        errors: errors.map((error) => error),\n      };\n    });\n\n    return {\n      allObjectsValid,\n      results,\n    };\n  }\n\n  static validateLocalFile(filePath: string): FileValidationResult {\n    try {\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n      const object: MetadataObject = JSON.parse(fileContent);\n      return this.validateSingleMetadataObject(object);\n    } catch (error) {\n      return {\n        isValid: false,\n        errors: [errorToMessage(error)],\n      };\n    }\n  }\n\n  static validateLocalDirectory(directoryPath: string): DirectoryValidationResult {\n    const errors: MetadataError[] = [];\n\n    const filesForValidation = fs\n      .readdirSync(directoryPath)\n      .filter((file) => file.endsWith('.json') || file.endsWith('.txt'))\n      // Sorts the file names numerically ensuring that files are ordered naturally (e.g., '1', '2', '10' instead of '1', '10', '2').\n      .sort((a, b) => {\n        const numA = parseInt(a.match(/\\d+/)?.[0] ?? '0', 10);\n        const numB = parseInt(b.match(/\\d+/)?.[0] ?? '0', 10);\n        return numA - numB;\n      });\n    if (filesForValidation.length === 0) {\n      return {\n        isValid: false,\n        errors: [\n          {\n            general: [dictionary.validation.directoryIsEmpty],\n          },\n        ],\n      };\n    }\n\n    for (const file of filesForValidation) {\n      const filePath = path.join(directoryPath, file);\n      const validationResult = this.validateLocalFile(filePath);\n\n      if (!validationResult.isValid) {\n        errors.push({\n          fileName: file,\n          general: validationResult.errors,\n        });\n      }\n    }\n\n    return { isValid: errors.length === 0, errors };\n  }\n\n  static validateOnChainArrayOfObjects = (\n    metadataObjects: Awaited<MetadataFromMirrorNode>[]\n  ): { isValid: boolean; errors: Array<{ serialNumber: number; message: string[] }> } => {\n    const errors: Array<{ serialNumber: number; message: string[] }> = [];\n\n    metadataObjects.forEach((obj) => {\n      if (obj.error) {\n        errors.push({\n          serialNumber: obj.serialNumber,\n          message: [obj.error],\n        });\n      } else if (obj.metadata) {\n        try {\n          validateObjectWithSchema(Hip412MetadataSchema, obj.metadata, validationMetadataErrorOptions);\n        } catch (e) {\n          errors.push({\n            serialNumber: obj.serialNumber,\n            message: [errorToMessage(e)],\n          });\n        }\n      }\n    });\n\n    return { isValid: errors.length === 0, errors };\n  };\n\n  static async validateMetadataFromOnChainCollection(network: NetworkName, tokenId: string, ipfsGateway?: string, limit: number = 100) {\n    const metadataObjects = await getNftMetadataFromCollection(network, tokenId, limit, ipfsGateway);\n\n    return TokenMetadataValidator.validateOnChainArrayOfObjects(metadataObjects);\n  }\n\n  static async validateSingleOnChainNFTMetadata(network: NetworkName, tokenId: string, serialNumber: number, ipfsGateway?: string) {\n    const nft = await getSingleNFTDetails(network, tokenId, serialNumber);\n    const decodedNFTMetadataURL = uriDecoder(nft, ipfsGateway);\n\n    const metadataObject = await getMetadataObjectsForValidation(decodedNFTMetadataURL[0].metadata, decodedNFTMetadataURL[0].serialNumber);\n\n    if (!metadataObject.metadata) {\n      return {\n        isValid: false,\n        errors: {\n          general: [metadataObject.error],\n          missingAttributes: [],\n        },\n      };\n    }\n    return TokenMetadataValidator.validateSingleMetadataObject(metadataObject.metadata);\n  }\n}\n"],"mappings":"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","ignoreList":[]}