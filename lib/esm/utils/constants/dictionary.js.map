{"version":3,"file":"dictionary.js","names":["getFullSystemPath","dictionary","errors","nftDeleted","nftNoTransactions","privateKeyRequired","privateKeyInvalid","unhandledError","pinataError","awsUploadIssue","awsUploadingError","message","noApiKeys","uploadService","noFiles","noMetadata","rarity","attributeTypeNotFound","trait_type","attributeNotFoundInFile","fileName","attributeNotFoundInObject","object","cannotFetchHbarExchangeRate","ipfsGatewayRequired","ipfsFailedToFetch","tooManyRequests","statusText","status","unknownErrorWhileFetching","serialNumber","localization","defaultLocaleTwoLetterLanguageCode","localeTwoLetterLanguageCode","defaultLocaleShouldNotAppear","wrongUriFormat","metadataBuilder","fieldAlreadySet","field","uriAndTypeRequired","localizationAlreadySet","localizatonFieldsMissing","createCollection","myPrivateKeyRequired","collectionNameRequired","collectionSymbolRequired","myAccountIdRequired","treasuryAccountPrivateKeySignRequired","collectionNotCreated","autoRenewAccountPrivateKeySignRequired","hbarAmountOrAmountAndDenominatingToken","validation","errorInCellWithHeader","line","column","invalidKeysDetected","keys","join","csvFileIsEmpty","path","errorInRow","error","missingAttributesInRow","csvFilePath","row","imageForNftNotFound","mediaFileNotSupported","arrayOfObjectsValidationError","unsupportedImageMimeType","requiredFieldMissing","requiredTypeFieldIsMissing","requiredAttributeFieldMissing","filePermissionDenied","fileEmptyOrFormattingError","directoryIsEmpty","hederaActions","mintingError","maxBatchSize","minBatchSize","cannotParseTokenId","cannotParsePrivateKey","minAmount","metadataRequired","tooManyCustomFees","cannotParseAccountId","pathToMetadataURIsFileNotSupportedInBrowser","mintToken","pathRequired","batchSizeUndefined","csvOrArrayRequired","tooLongCID"],"sources":["../../../../src/utils/constants/dictionary.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { getFullSystemPath } from '../../helpers/get-full-system-path';\n\nexport const dictionary = {\n  errors: {\n    nftDeleted: 'NFT has been deleted.',\n    nftNoTransactions: 'NFT has not any transactions yet',\n    privateKeyRequired: 'Private key is required',\n    privateKeyInvalid: 'Invalid private key string. Please provide a valid private key string.',\n    unhandledError: 'Unknown error.',\n    pinataError: 'Cannot create Pinata provider. Please pass pinataJwtKey OR (pinataApiKey AND pinataSecretApiKey).',\n    awsUploadIssue: 'Error encountered using AWS SDK. Please restart the app and try again.',\n    awsUploadingError: (message: string) => `Failed to upload file to AWS S3: ${message}`,\n    noApiKeys: 'Please provide at least one API key to use \"NFT.storage\".',\n    uploadService: {\n      noFiles: 'No files to upload.',\n      noMetadata: 'No metadata to upload.',\n    },\n    rarity: {\n      attributeTypeNotFound: (trait_type: string) => `Attribute ${trait_type} not found in attributes map`,\n      attributeNotFoundInFile: (fileName: string) =>\n        `Attributes not found in file ${fileName}. Please ensure that your metadata file is valid.`,\n      attributeNotFoundInObject: (object: string) =>\n        `Attributes not found in object ${object}. Please ensure that your metadata file is valid.`,\n    },\n    cannotFetchHbarExchangeRate: 'Can not fetch Hbar exchange rate.',\n    ipfsGatewayRequired: 'IPFS gateway is required when metadata contains IPFS links.',\n    ipfsFailedToFetch: 'Failed to fetch metadata using IPFS gateway',\n    tooManyRequests: (statusText: string, status: number) => `${statusText}. Status code: ${status}`,\n    unknownErrorWhileFetching: (serialNumber: number) => `Error fetching metadata for serialNumber ${serialNumber}`,\n    localization: {\n      defaultLocaleTwoLetterLanguageCode: 'Default locale should be two-letter language code, got',\n      localeTwoLetterLanguageCode: 'Locale should be two-letter language code, got',\n      defaultLocaleShouldNotAppear: \"Default locale should not appear in 'localization.locales'\",\n      wrongUriFormat: 'URI should be of format <protocol>://<hash>/{locale}.json',\n    },\n    metadataBuilder: {\n      fieldAlreadySet: (field: string) => `${field} can only be set once`,\n      uriAndTypeRequired: 'URI and Type are required for adding a file',\n      localizationAlreadySet: 'Localization can only be set once',\n      localizatonFieldsMissing: 'Localization uri, default locale, and locales array are required.',\n    },\n  },\n  createCollection: {\n    myPrivateKeyRequired: 'myPrivateKey is required',\n    collectionNameRequired: 'collectionName is required',\n    collectionSymbolRequired: 'collectionSymbol is required',\n    myAccountIdRequired: 'myAccountId is required',\n    treasuryAccountPrivateKeySignRequired:\n      'If you want to use treasuryAccount to sign, you need to pass the treasuryAccountPrivateKey also',\n    collectionNotCreated: 'Something went wrong while creating the collection',\n    autoRenewAccountPrivateKeySignRequired:\n      'If you want to use autoRenewAccount to sign, you need to pass the autoRenewAccountPrivateKey also',\n    hbarAmountOrAmountAndDenominatingToken:\n      'Either hbarAmount should be set and both amount and denominatingTokenId should not be set, or amount and denominatingTokenId should be set and hbarAmount should not be set.',\n  },\n  validation: {\n    errorInCellWithHeader: (line: number, column: number) =>\n      `Error in line number ${line}, column number ${column}. Check if your CSV file is well prepared.`,\n    invalidKeysDetected: (keys: string[]) => `Redundant key(s) detected: ['${keys.join(\"', '\")}']`,\n    csvFileIsEmpty: (path?: string) =>\n      path ? `No metadata found in CSV file \"${getFullSystemPath(path)}\".` : 'No metadata found in CSV file.',\n    errorInRow: (line: number | string, error: string) =>\n      `Error at: line number ${typeof line === 'number' ? line + 1 : line} in ${getFullSystemPath('exampleCSV.csv')}\\n${error}`,\n    missingAttributesInRow: (csvFilePath: string, row: number) => ` - \"${getFullSystemPath(csvFilePath)}\" in row ${row}`,\n    imageForNftNotFound:\n      'Image for NFT not found. The name of the image file should match its corresponding metadata file name (ex: 1.jpg with 1.json) or specify directly the \"image\" property.',\n    mediaFileNotSupported: 'Media file is not supported.',\n    arrayOfObjectsValidationError: (fileName: string, error: string) => `Error at: ${getFullSystemPath(fileName)} - ${error}`,\n    unsupportedImageMimeType: 'Unsupported image MIME type.',\n    requiredFieldMissing: 'Required field is missing',\n    requiredTypeFieldIsMissing: 'The required \"type\" field is missing.',\n    requiredAttributeFieldMissing: 'The required \"attributes\" field is missing.',\n    filePermissionDenied: 'Permission denied',\n    fileEmptyOrFormattingError: 'Unexpected end of JSON input',\n    directoryIsEmpty: 'Directory is empty',\n  },\n  hederaActions: {\n    mintingError: 'There was an error while minting the NFT.',\n    maxBatchSize: 'Max Buffer exceeded. Use batchSize smaller of equal to 10',\n    minBatchSize: 'Min Buffer exceeded. Use batchSize greater than 0',\n    cannotParseTokenId: 'Cannot parse tokenId',\n    cannotParsePrivateKey: 'Cannot parse privateKey',\n    minAmount: 'Amount needs to be greater than 0',\n    metadataRequired: 'metadata is required',\n    tooManyCustomFees: 'You can define up to 10 custom fees',\n    cannotParseAccountId: 'Cannot parse accountId',\n    pathToMetadataURIsFileNotSupportedInBrowser:\n      'The \"pathToMetadataURIsFile\" property is not supported in browser while trying to mint unique metadata. It is required to pass an array of the metadata.',\n  },\n  mintToken: {\n    pathRequired: 'Path to File required',\n    batchSizeUndefined: \"batchSize can't be undefined\",\n    csvOrArrayRequired: 'Either pass a path to file(pathToMetadataURIsFile) or an array of strings(metadata)',\n    tooLongCID: 'One of the CIDs is longer than 100 characters',\n  },\n} as const;\n"],"mappings":"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","ignoreList":[]}