{"version":3,"file":"get-holder-and-duration-e2e.test.js","names":["LONG_E2E_TIMEOUT","LONG_MIRROR_NODE_DELAY","MIRROR_NODE_DELAY","nftSDK","operatorAccountId","operatorPrivateKey","secondAccountId","secondPrivateKey","AccountId","NftId","TokenAssociateTransaction","TokenId","TransferTransaction","getHolderAndDuration","afterAll","client","close","tokenId","baseNFT","beforeAll","createCollection","collectionName","collectionSymbol","mintUniqueMetadata","batchSize","metadata","supplyKey","Promise","resolve","setTimeout","describe","it","result","serialNumber","network","holderSinceDate","Date","holderSince","today","expect","getFullYear","toEqual","getMonth","getDate","holder","any","String","nftSerial","nftId","fromString","associateTransaction","setAccountId","setTokenIds","freezeWith","associateSignTx","sign","execute","transaction","addNftTransfer","signTx"],"sources":["../../../../src/test/e2e/get-holder-and-duration-e2e.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { LONG_E2E_TIMEOUT, LONG_MIRROR_NODE_DELAY, MIRROR_NODE_DELAY } from '../__mocks__/consts';\nimport { nftSDK, operatorAccountId, operatorPrivateKey, secondAccountId, secondPrivateKey } from './e2e-consts';\nimport { AccountId, NftId, TokenAssociateTransaction, TokenId, TransferTransaction } from '@hashgraph/sdk';\nimport { getHolderAndDuration } from '../../get-holder-and-duration';\n\nafterAll(async () => {\n  nftSDK.client.close();\n});\n\nlet tokenId = '';\nlet baseNFT = [] as any[];\n\nbeforeAll(async () => {\n  tokenId = await nftSDK.createCollection({\n    collectionName: 'test_name',\n    collectionSymbol: 'test_symbol',\n  });\n  baseNFT = await nftSDK.mintUniqueMetadata({\n    tokenId,\n    batchSize: 10,\n    metadata: ['www.youtube.com'],\n    supplyKey: operatorPrivateKey,\n  });\n\n  await new Promise((resolve) => setTimeout(resolve, MIRROR_NODE_DELAY));\n}, LONG_E2E_TIMEOUT);\n\ndescribe('getHolderAndDuration', () => {\n  it(\n    'should return holder and duration of an NFT that has been minted successfully',\n    async () => {\n      const result = await getHolderAndDuration({ tokenId, serialNumber: baseNFT[0].serialNumber, network: 'testnet' });\n      const holderSinceDate = new Date(result.holderSince);\n      const today = new Date();\n\n      expect(holderSinceDate.getFullYear()).toEqual(today.getFullYear());\n      expect(holderSinceDate.getMonth()).toEqual(today.getMonth());\n      expect(holderSinceDate.getDate()).toEqual(today.getDate());\n      expect(result).toEqual({\n        holder: operatorAccountId,\n        holderSince: expect.any(String),\n      });\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should return holder and duration of an NFT that has been transferred to another account successfully',\n    async () => {\n      const nftSerial = baseNFT[0].serialNumber;\n      const nftId = new NftId(TokenId.fromString(tokenId), nftSerial);\n\n      // Associate a token to an account\n      const associateTransaction = new TokenAssociateTransaction()\n        .setAccountId(secondAccountId)\n        .setTokenIds([TokenId.fromString(tokenId)])\n        .freezeWith(nftSDK.client);\n\n      const associateSignTx = await associateTransaction.sign(secondPrivateKey);\n      await associateSignTx.execute(nftSDK.client);\n\n      // Transfer created NFT from first acc to second acc\n      const transaction = new TransferTransaction()\n        .addNftTransfer(nftId, AccountId.fromString(operatorAccountId), AccountId.fromString(secondAccountId))\n        .freezeWith(nftSDK.client);\n      const signTx = await transaction.sign(operatorPrivateKey);\n      await signTx.execute(nftSDK.client);\n\n      await new Promise((resolve) => setTimeout(resolve, LONG_MIRROR_NODE_DELAY));\n\n      const result = await getHolderAndDuration({ tokenId, serialNumber: nftSerial, network: 'testnet' });\n      const holderSinceDate = new Date(result.holderSince);\n      const today = new Date();\n\n      expect(holderSinceDate.getFullYear()).toEqual(today.getFullYear());\n      expect(holderSinceDate.getMonth()).toEqual(today.getMonth());\n      expect(holderSinceDate.getDate()).toEqual(today.getDate());\n      expect(result).toEqual({\n        holder: secondAccountId,\n        holderSince: expect.any(String),\n      });\n    },\n    LONG_E2E_TIMEOUT\n  );\n});\n"],"mappings":"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","ignoreList":[]}