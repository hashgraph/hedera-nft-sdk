{"version":3,"file":"convert-csv-to-metadata-objects.test.js","names":["fs","CSV_EXAMPLE_WITH_ALL_FIELDS","CSV_EXAMPLE_EMPTY_FILE","CSV_EXAMPLE_WITH_HEADERS_ONLY","convertCSVToMetadataObjects","AMOUNT_OF_HEADERS","describe","it","csvContent","readFileSync","csvRows","trim","split","length","metadataObjects","expect","toBe","EXPECTED_FIRST_OBJECT","name","creator","description","image","type","properties","external_url","url","attributes","trait_type","value","toBeGreaterThan","toEqual","limit","rejects","toThrow"],"sources":["../../../../src/test/integration/convert-csv-to-metadata-objects.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport { CSV_EXAMPLE_WITH_ALL_FIELDS, CSV_EXAMPLE_EMPTY_FILE, CSV_EXAMPLE_WITH_HEADERS_ONLY } from '../__mocks__/consts';\nimport { convertCSVToMetadataObjects } from '../../file-management/convert-csv-to-metadata-objects';\nimport { AMOUNT_OF_HEADERS } from '../../utils/constants/csv-constants';\n\ndescribe('convertCSVToMetadataObjects Integration Test', () => {\n  it('should create correct number of metadata objects based on the CSV file', async () => {\n    const csvContent = fs.readFileSync(CSV_EXAMPLE_WITH_ALL_FIELDS, 'utf-8');\n    const csvRows = csvContent.trim().split('\\n').length - AMOUNT_OF_HEADERS;\n    const metadataObjects = await convertCSVToMetadataObjects(CSV_EXAMPLE_WITH_ALL_FIELDS);\n\n    expect(metadataObjects.length).toBe(csvRows);\n  });\n\n  it('should accurately convert CSV data to metadata objects', async () => {\n    const EXPECTED_FIRST_OBJECT = {\n      name: 'Example NFT 1',\n      creator: 'Hedera',\n      description: 'This is an example NFT 1',\n      image: 'https://nft.com/mycollection/1.jpg',\n      type: 'image/jpeg',\n      properties: {\n        external_url: 'https://nft.com/mycollection/1',\n        url: 'https://nft.com/mycollection/1',\n      },\n      attributes: [\n        { trait_type: 'color', value: 'rgb(0,255,0)' },\n        { trait_type: 'hasPipe', value: 'false' },\n        { trait_type: 'stamina', value: '65' },\n      ],\n    };\n\n    const metadataObjects = await convertCSVToMetadataObjects(CSV_EXAMPLE_WITH_ALL_FIELDS);\n\n    expect(metadataObjects.length).toBeGreaterThan(0);\n    expect(metadataObjects[0]).toEqual(EXPECTED_FIRST_OBJECT);\n  });\n\n  it('should return a number of metadataObjects no greater than specified limit', async () => {\n    const limit = 5;\n    const metadataObjects = await convertCSVToMetadataObjects(CSV_EXAMPLE_WITH_ALL_FIELDS, limit);\n\n    expect(metadataObjects.length).toBe(limit);\n  });\n\n  it('should throw an error if the CSV file is empty or contains only headers', async () => {\n    await expect(convertCSVToMetadataObjects(CSV_EXAMPLE_EMPTY_FILE)).rejects.toThrow();\n    await expect(convertCSVToMetadataObjects(CSV_EXAMPLE_WITH_HEADERS_ONLY)).rejects.toThrow();\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,EAAE,MAAM,IAAI;AACnB,SAASC,2BAA2B,EAAEC,sBAAsB,EAAEC,6BAA6B,QAAQ,qBAAqB;AACxH,SAASC,2BAA2B,QAAQ,uDAAuD;AACnG,SAASC,iBAAiB,QAAQ,qCAAqC;AAEvEC,QAAQ,CAAC,8CAA8C,EAAE,MAAM;EAC7DC,EAAE,CAAC,wEAAwE,EAAE,YAAY;IACvF,MAAMC,UAAU,GAAGR,EAAE,CAACS,YAAY,CAACR,2BAA2B,EAAE,OAAO,CAAC;IACxE,MAAMS,OAAO,GAAGF,UAAU,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,GAAGR,iBAAiB;IACxE,MAAMS,eAAe,GAAG,MAAMV,2BAA2B,CAACH,2BAA2B,CAAC;IAEtFc,MAAM,CAACD,eAAe,CAACD,MAAM,CAAC,CAACG,IAAI,CAACN,OAAO,CAAC;EAC9C,CAAC,CAAC;EAEFH,EAAE,CAAC,wDAAwD,EAAE,YAAY;IACvE,MAAMU,qBAAqB,GAAG;MAC5BC,IAAI,EAAE,eAAe;MACrBC,OAAO,EAAE,QAAQ;MACjBC,WAAW,EAAE,0BAA0B;MACvCC,KAAK,EAAE,oCAAoC;MAC3CC,IAAI,EAAE,YAAY;MAClBC,UAAU,EAAE;QACVC,YAAY,EAAE,gCAAgC;QAC9CC,GAAG,EAAE;MACP,CAAC;MACDC,UAAU,EAAE,CACV;QAAEC,UAAU,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAe,CAAC,EAC9C;QAAED,UAAU,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAQ,CAAC,EACzC;QAAED,UAAU,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAK,CAAC;IAE1C,CAAC;IAED,MAAMd,eAAe,GAAG,MAAMV,2BAA2B,CAACH,2BAA2B,CAAC;IAEtFc,MAAM,CAACD,eAAe,CAACD,MAAM,CAAC,CAACgB,eAAe,CAAC,CAAC,CAAC;IACjDd,MAAM,CAACD,eAAe,CAAC,CAAC,CAAC,CAAC,CAACgB,OAAO,CAACb,qBAAqB,CAAC;EAC3D,CAAC,CAAC;EAEFV,EAAE,CAAC,2EAA2E,EAAE,YAAY;IAC1F,MAAMwB,KAAK,GAAG,CAAC;IACf,MAAMjB,eAAe,GAAG,MAAMV,2BAA2B,CAACH,2BAA2B,EAAE8B,KAAK,CAAC;IAE7FhB,MAAM,CAACD,eAAe,CAACD,MAAM,CAAC,CAACG,IAAI,CAACe,KAAK,CAAC;EAC5C,CAAC,CAAC;EAEFxB,EAAE,CAAC,yEAAyE,EAAE,YAAY;IACxF,MAAMQ,MAAM,CAACX,2BAA2B,CAACF,sBAAsB,CAAC,CAAC,CAAC8B,OAAO,CAACC,OAAO,CAAC,CAAC;IACnF,MAAMlB,MAAM,CAACX,2BAA2B,CAACD,6BAA6B,CAAC,CAAC,CAAC6B,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5F,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}