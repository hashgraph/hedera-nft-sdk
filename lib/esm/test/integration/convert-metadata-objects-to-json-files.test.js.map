{"version":3,"file":"convert-metadata-objects-to-json-files.test.js","names":["fs","path","z","Hip412MetadataCommonSchema","convertMetadataObjectsToJsonFiles","JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH","CSV_EXAMPLE_WITH_ALL_FIELDS","CSV_EXAMPLE_ONLY_REQUIRED_FIELDS","CSV_EXAMPLE_WITH_MISSING_REQUIRED_FIELDS","CSV_EXAMPLE_ONLY_REQUIRED_FIELDS_AND_HEADERS","LONG_E2E_TIMEOUT","readCSVFile","parseCSVRowsToMetadataObjects","ATTRIBUTES","PROPERTIES","AMOUNT_OF_HEADERS","describe","beforeEach","existsSync","mkdirSync","recursive","afterEach","rmSync","force","it","csvParsedRows","metadataObjects","headerAttributes","headerProperties","result","savedJsonFilesLocation","expect","errors","toHaveLength","files","readdirSync","csvContent","readFileSync","csvRows","trim","split","length","expectedJsonFilesCount","toBe","Hip412MetadataSchema","object","forEach","file","filePath","join","jsonData","JSON","parse","not","toThrow","limit","generatedFiles"],"sources":["../../../../src/test/integration/convert-metadata-objects-to-json-files.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { Hip412MetadataCommonSchema } from '../../utils/validation-schemas/hip412-metadata-schema';\nimport { convertMetadataObjectsToJsonFiles } from '../../file-management/convert-metadata-objects-to-json-files';\nimport {\n  JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n  CSV_EXAMPLE_WITH_ALL_FIELDS,\n  CSV_EXAMPLE_ONLY_REQUIRED_FIELDS,\n  CSV_EXAMPLE_WITH_MISSING_REQUIRED_FIELDS,\n  CSV_EXAMPLE_ONLY_REQUIRED_FIELDS_AND_HEADERS,\n  LONG_E2E_TIMEOUT,\n} from '../__mocks__/consts';\nimport { readCSVFile } from '../../services/csv-file-reader';\nimport { parseCSVRowsToMetadataObjects } from '../../services/json-metadata-from-csv-converter';\nimport { ATTRIBUTES, PROPERTIES, AMOUNT_OF_HEADERS } from '../../utils/constants/csv-constants';\n\ndescribe('convertMetadataObjectsToJsonFiles Integration Test', () => {\n  beforeEach(() => {\n    if (!fs.existsSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH)) {\n      fs.mkdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH, { recursive: true });\n    }\n  });\n\n  afterEach(() => {\n    fs.rmSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH, { recursive: true, force: true });\n  });\n\n  it('convertMetadataObjectsToJsonFiles should complete without errors', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it(\n    'convertMetadataObjectsToJsonFiles should create correct number of JSON files based on the CSV file',\n    async () => {\n      const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n      const metadataObjects = parseCSVRowsToMetadataObjects({\n        csvParsedRows,\n        headerAttributes: ATTRIBUTES,\n        headerProperties: PROPERTIES,\n      });\n\n      await convertMetadataObjectsToJsonFiles({\n        metadataObjects,\n        savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n      });\n\n      const files = fs.readdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH);\n      const csvContent = fs.readFileSync(CSV_EXAMPLE_WITH_ALL_FIELDS, 'utf-8');\n      const csvRows = csvContent.trim().split('\\n').length;\n      const expectedJsonFilesCount = csvRows - AMOUNT_OF_HEADERS;\n\n      expect(files.length).toBe(expectedJsonFilesCount);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it('Each file should match Hip412MetadataSchema', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    const files = fs.readdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH);\n    const Hip412MetadataSchema = z.object(Hip412MetadataCommonSchema);\n\n    files.forEach((file) => {\n      const filePath = path.join(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH, file);\n      const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n\n      expect(() => Hip412MetadataSchema.parse(jsonData)).not.toThrow();\n    });\n  });\n\n  it('convertMetadataObjectsToJsonFiles should create a limited number of JSON files when nftsLimit is set', async () => {\n    const limit = 2;\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n      limit,\n    });\n\n    const generatedFiles = fs.readdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH);\n    expect(generatedFiles.length).toBe(limit);\n  });\n\n  it('convertMetadataObjectsToJsonFiles should complete without errors using CSV with only required fields filled', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_ONLY_REQUIRED_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it('convertMetadataObjectsToJsonFiles should complete without errors using CSV with only required fields and headers filled', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_ONLY_REQUIRED_FIELDS_AND_HEADERS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it('convertMetadataObjectsToJsonFiles should return errors for missing required fields in CSV', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_MISSING_REQUIRED_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n    expect(result.errors).toHaveLength(8);\n  });\n});\n"],"mappings":"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","ignoreList":[]}