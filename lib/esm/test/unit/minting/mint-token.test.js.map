{"version":3,"file":"mint-token.test.js","names":["mintToken","Status","myPrivateKey","dictionary","jest","mock","mockedSDK","requireActual","Client","fn","mockImplementation","forName","mockReturnThis","forLocalNode","forNetwork","setMirrorNetwork","setOperator","PrivateKey","fromString","generateED25519","fromStringED25519","fromStringECDSA","toString","TokenMintTransaction","setTokenId","setMaxTransactionFee","setMetadata","freezeWith","sign","mockResolvedValue","execute","getReceipt","status","Success","describe","it","mockClient","mockMetaData","mockTokenId","result","expect","toEqual","repeat","rejects","toThrow","tooLongCID"],"sources":["../../../../../src/test/unit/minting/mint-token.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { mintToken } from '../../../nftSDKFunctions/mint-token';\nimport { Client, Status } from '@hashgraph/sdk';\nimport { myPrivateKey } from '../../__mocks__/consts';\nimport { dictionary } from '../../../utils/constants/dictionary';\n\njest.mock('@hashgraph/sdk', () => {\n  const mockedSDK = jest.requireActual('@hashgraph/sdk'); // Import rzeczywistej implementacji SDK\n\n  return {\n    ...mockedSDK,\n    Client: jest.fn().mockImplementation(() => ({\n      forName: jest.fn().mockReturnThis(),\n      forLocalNode: jest.fn().mockReturnThis(),\n      forNetwork: jest.fn().mockReturnThis(),\n      setMirrorNetwork: jest.fn().mockReturnThis(),\n      setOperator: jest.fn().mockReturnThis(),\n    })),\n    PrivateKey: {\n      ...mockedSDK.PrivateKey,\n      fromString: jest.fn().mockImplementation(() => mockedSDK.PrivateKey.generateED25519()),\n      fromStringED25519: jest.fn().mockImplementation(() => mockedSDK.PrivateKey.generateED25519()),\n      fromStringECDSA: jest.fn().mockImplementation(() => mockedSDK.PrivateKey.generateED25519()),\n      generateED25519: jest.fn(() => ({\n        toString: () => 'fake-private-key-ed25519',\n      })),\n    },\n    TokenMintTransaction: jest.fn(() => ({\n      setTokenId: jest.fn().mockReturnThis(),\n      setMaxTransactionFee: jest.fn().mockReturnThis(),\n      setMetadata: jest.fn().mockReturnThis(),\n      freezeWith: jest.fn().mockReturnThis(),\n      sign: jest.fn().mockResolvedValue({\n        execute: jest.fn().mockResolvedValue({\n          getReceipt: jest.fn().mockResolvedValue({\n            status: mockedSDK.Status.Success,\n          }),\n        }),\n      }),\n    })),\n  };\n});\n\ndescribe('mintToken', () => {\n  it('should return Success status', async () => {\n    const mockClient = {} as Client;\n    const mockMetaData = ['meta1'];\n    const mockTokenId = 'tokenId';\n\n    const result = await mintToken(mockMetaData, mockTokenId, myPrivateKey, mockClient);\n\n    expect(result).toEqual({ status: Status.Success });\n  });\n\n  it('should return Success status when metadata is 99 characters long', async () => {\n    const mockClient = {} as Client;\n    const mockMetaData = ['a'.repeat(99)]; // 99 characters\n    const mockTokenId = 'tokenId';\n\n    const result = await mintToken(mockMetaData, mockTokenId, myPrivateKey, mockClient);\n\n    expect(result).toEqual({ status: Status.Success });\n  });\n\n  it('should return Success status when metadata is 100 characters long', async () => {\n    const mockClient = {} as Client;\n    const mockMetaData = ['a'.repeat(100)]; // 100 characters\n    const mockTokenId = 'tokenId';\n\n    const result = await mintToken(mockMetaData, mockTokenId, myPrivateKey, mockClient);\n\n    expect(result).toEqual({ status: Status.Success });\n  });\n\n  it('should throw error when metadata is 101 characters long', async () => {\n    const mockClient = {} as Client;\n    const mockMetaData = ['a'.repeat(101)]; // 101 characters\n    const mockTokenId = 'tokenId';\n\n    await expect(mintToken(mockMetaData, mockTokenId, myPrivateKey, mockClient)).rejects.toThrow(dictionary.mintToken.tooLongCID);\n  });\n});\n"],"mappings":"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","ignoreList":[]}