{"version":3,"file":"uri-decoder.test.js","names":["uriDecoder","EXAMPLE_IPFS_GATEWAY","HASH_WITHOUT_IPFS_PREFIX","IPFS_PREFIXED_HASH","HTTPS_URL","generateNFTDetails","metadata","serialNumber","account_id","created_timestamp","deleted","btoa","modified_timestamp","serial_number","token_id","spender","describe","it","nfts","expected","result","expect","toEqual","toThrow","replace","length","toBe"],"sources":["../../../../../src/test/unit/metadata/uri-decoder.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { uriDecoder } from '../../../helpers/uri-decoder';\nimport { NFTDetails, DecodedMetadata } from '../../../types/nfts';\nimport { EXAMPLE_IPFS_GATEWAY, HASH_WITHOUT_IPFS_PREFIX, IPFS_PREFIXED_HASH, HTTPS_URL } from '../../__mocks__/consts';\n\nconst generateNFTDetails = (metadata: string, serialNumber: number) => ({\n  account_id: '0.0.123',\n  created_timestamp: '1625097600',\n  deleted: false,\n  metadata: btoa(metadata),\n  modified_timestamp: '1625097600',\n  serial_number: serialNumber,\n  token_id: '0.0.456',\n  spender: null,\n});\n\ndescribe('uriDecoder', () => {\n  it('decodes IPFS metadata containing \"ipfs://\" prefix using provided ipfsGateway', () => {\n    const nfts: NFTDetails[] = [generateNFTDetails(IPFS_PREFIXED_HASH, 1)];\n    const expected: DecodedMetadata[] = [\n      {\n        metadata: `${EXAMPLE_IPFS_GATEWAY}QmSomeHash`,\n        serialNumber: 1,\n      },\n    ];\n\n    const result = uriDecoder(nfts, EXAMPLE_IPFS_GATEWAY);\n    expect(result).toEqual(expected);\n  });\n\n  it('decodes IPFS metadata that does not contain \"ipfs://\" prefix using provided ipfsGateway', () => {\n    const nfts: NFTDetails[] = [generateNFTDetails(HASH_WITHOUT_IPFS_PREFIX, 2)];\n    const expected: DecodedMetadata[] = [\n      {\n        metadata: `${EXAMPLE_IPFS_GATEWAY}QmAnotherHash`,\n        serialNumber: 2,\n      },\n    ];\n\n    const result = uriDecoder(nfts, EXAMPLE_IPFS_GATEWAY);\n    expect(result).toEqual(expected);\n  });\n\n  it('does not alter https:// prefixed metadata', () => {\n    const nfts: NFTDetails[] = [generateNFTDetails(HTTPS_URL, 3)];\n\n    const expected: DecodedMetadata[] = [\n      {\n        metadata: 'https://example.com/metadata.json',\n        serialNumber: 3,\n      },\n    ];\n\n    const result = uriDecoder(nfts, EXAMPLE_IPFS_GATEWAY);\n    expect(result).toEqual(expected);\n  });\n\n  it('throws an error if ipfs metadata is provided without an ipfsGateway', () => {\n    const nfts: NFTDetails[] = [generateNFTDetails(IPFS_PREFIXED_HASH, 4)];\n\n    expect(() => uriDecoder(nfts)).toThrow('IPFS gateway is required');\n  });\n\n  it('decodes various types of metadata correctly', () => {\n    const nfts: NFTDetails[] = [\n      generateNFTDetails(IPFS_PREFIXED_HASH, 1),\n      generateNFTDetails(HASH_WITHOUT_IPFS_PREFIX, 2),\n      generateNFTDetails(HTTPS_URL, 3),\n    ];\n\n    const expected: DecodedMetadata[] = [\n      {\n        metadata: IPFS_PREFIXED_HASH.replace('ipfs://', EXAMPLE_IPFS_GATEWAY),\n        serialNumber: 1,\n      },\n      { metadata: EXAMPLE_IPFS_GATEWAY + HASH_WITHOUT_IPFS_PREFIX, serialNumber: 2 },\n      { metadata: HTTPS_URL, serialNumber: 3 },\n    ];\n\n    const result = uriDecoder(nfts, EXAMPLE_IPFS_GATEWAY);\n    expect(result).toEqual(expected);\n  });\n\n  it('calls decoder correct number of times for multiple NFTs', () => {\n    const nfts: NFTDetails[] = [\n      generateNFTDetails(IPFS_PREFIXED_HASH, 1),\n      generateNFTDetails(HASH_WITHOUT_IPFS_PREFIX, 2),\n      generateNFTDetails(HTTPS_URL, 3),\n    ];\n\n    const result = uriDecoder(nfts, EXAMPLE_IPFS_GATEWAY);\n    expect(result.length).toBe(3);\n  });\n});\n"],"mappings":"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","ignoreList":[]}