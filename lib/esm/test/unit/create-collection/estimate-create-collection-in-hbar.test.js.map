{"version":3,"file":"estimate-create-collection-in-hbar.test.js","names":["myAccountId","mySecondAccountId","dictionary","estimateCreateCollectionInHbar","FeeFactory","getHbarPriceInDollars","jest","mock","feeFactoryInstance","beforeAll","describe","it","mockResolvedValue","priceInDollars","hbars","collectionName","network","collectionSymbol","expect","toEqual","royaltyFee","collectorAccountId","numerator","denominator","allCollectorsAreExempt","fallbackFee","hbarAmount","customFees","fixedFee","treasuryAccount","rejects","toThrow","createCollection","collectionSymbolRequired"],"sources":["../../../../../src/test/unit/create-collection/estimate-create-collection-in-hbar.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { myAccountId, mySecondAccountId } from '../../__mocks__/consts';\nimport { dictionary } from '../../../utils/constants/dictionary';\nimport { estimateCreateCollectionInHbar } from '../../../nftSDKFunctions/estimate-create-collection-in-hbar';\nimport { FeeFactory } from '../../../feeFactory';\nimport { getHbarPriceInDollars } from '../../../helpers/get-hbar-price-in-dollars';\n\njest.mock('../../../helpers/get-hbar-price-in-dollars');\n\nlet feeFactoryInstance: FeeFactory;\n\nbeforeAll(() => {\n  feeFactoryInstance = new FeeFactory();\n});\n\ndescribe('estimateCreateCollectionInHbars', () => {\n  it('should work properly with default values', async () => {\n    (getHbarPriceInDollars as jest.Mock).mockResolvedValue({ priceInDollars: 10 });\n\n    const hbars = await estimateCreateCollectionInHbar({\n      collectionName: 'test',\n      network: 'testnet',\n      collectionSymbol: 'test2',\n    });\n\n    expect(hbars).toEqual(0.086112);\n  });\n\n  it('should work properly with royalty fee', async () => {\n    (getHbarPriceInDollars as jest.Mock).mockResolvedValue({ priceInDollars: 10 });\n\n    const royaltyFee = feeFactoryInstance.royaltyFee({\n      collectorAccountId: myAccountId,\n      numerator: 11,\n      denominator: 100,\n      allCollectorsAreExempt: false,\n      fallbackFee: {\n        allCollectorsAreExempt: false,\n        collectorAccountId: mySecondAccountId,\n        hbarAmount: 100,\n      },\n    });\n\n    const hbars = await estimateCreateCollectionInHbar({\n      collectionName: 'test',\n      network: 'testnet',\n      collectionSymbol: 'test2',\n      customFees: [royaltyFee],\n    });\n\n    expect(hbars).toEqual(0.17235899999999998);\n  });\n\n  it('should work properly with fixed fees', async () => {\n    (getHbarPriceInDollars as jest.Mock).mockResolvedValue({ priceInDollars: 10 });\n\n    const fixedFee = feeFactoryInstance.fixedFee({\n      allCollectorsAreExempt: false,\n      collectorAccountId: myAccountId,\n      hbarAmount: 100,\n    });\n\n    const hbars = await estimateCreateCollectionInHbar({\n      collectionName: 'test',\n      network: 'testnet',\n      collectionSymbol: 'test2',\n      customFees: [fixedFee, fixedFee],\n    });\n\n    expect(hbars).toEqual(0.172439);\n  });\n\n  it('should throw an error when invalid parameters are passed', async () => {\n    await expect(\n      estimateCreateCollectionInHbar({\n        collectionName: '',\n        collectionSymbol: '',\n        treasuryAccount: '',\n        network: 'testnet',\n        customFees: [],\n      })\n    ).rejects.toThrow(dictionary.createCollection.collectionSymbolRequired);\n  });\n});\n"],"mappings":"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","ignoreList":[]}