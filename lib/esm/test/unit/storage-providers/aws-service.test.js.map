{"version":3,"file":"aws-service.test.js","names":["AWSService","S3Client","Upload","AWS_RES_DONE","Blob","jest","mock","describe","awsAccessKeyId","awsSecretAccessKey","awsS3Region","awsS3Bucket","awsService","beforeEach","mockClear","it","mockFile","Uint8Array","mockImplementation","done","fn","mockResolvedValue","result","uploadFile","expect","toEqual","mockRejectedValue","Error","rejects","toThrow"],"sources":["../../../../../src/test/unit/storage-providers/aws-service.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { AWSService } from '../../../services/file-storages/aws/aws-service';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { AWS_RES_DONE } from '../../__mocks__/aws';\nimport { Blob } from 'buffer';\n\njest.mock('@aws-sdk/client-s3');\njest.mock('@aws-sdk/lib-storage');\n\ndescribe('AWSService', () => {\n  const awsAccessKeyId = 'myAwsAccessKeyId';\n  const awsSecretAccessKey = 'myAwsSecretAccessKey';\n  const awsS3Region = 'myAwsS3Region';\n  const awsS3Bucket = 'myAwsS3Bucket';\n\n  let awsService: AWSService;\n\n  beforeEach(() => {\n    (S3Client as jest.Mock).mockClear();\n    (Upload as unknown as jest.Mock).mockClear();\n\n    awsService = new AWSService(awsAccessKeyId, awsSecretAccessKey, awsS3Region, awsS3Bucket);\n  });\n\n  it('should upload a file successfully', async () => {\n    const mockFile = new Blob([new Uint8Array([1, 2, 3])]);\n\n    (Upload as unknown as jest.Mock).mockImplementation(() => ({\n      done: jest.fn().mockResolvedValue(AWS_RES_DONE),\n    }));\n\n    const result = await awsService.uploadFile(mockFile);\n\n    expect(result).toEqual('https://hederatest.s3.eu-central-1.amazonaws.com/1708599289764.jpg');\n  });\n\n  it('should throw an error when upload fails', async () => {\n    const mockFile = new Blob([new Uint8Array([1, 2, 3])]);\n\n    (Upload as unknown as jest.Mock).mockImplementation(() => ({\n      done: jest.fn().mockRejectedValue(new Error('Upload failed')),\n    }));\n\n    await expect(awsService.uploadFile(mockFile)).rejects.toThrow('Upload failed');\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,iDAAiD;AAC5E,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,IAAI,QAAQ,QAAQ;AAE7BC,IAAI,CAACC,IAAI,CAAC,oBAAoB,CAAC;AAC/BD,IAAI,CAACC,IAAI,CAAC,sBAAsB,CAAC;AAEjCC,QAAQ,CAAC,YAAY,EAAE,MAAM;EAC3B,MAAMC,cAAc,GAAG,kBAAkB;EACzC,MAAMC,kBAAkB,GAAG,sBAAsB;EACjD,MAAMC,WAAW,GAAG,eAAe;EACnC,MAAMC,WAAW,GAAG,eAAe;EAEnC,IAAIC,UAAsB;EAE1BC,UAAU,CAAC,MAAM;IACdZ,QAAQ,CAAea,SAAS,CAAC,CAAC;IAClCZ,MAAM,CAA0BY,SAAS,CAAC,CAAC;IAE5CF,UAAU,GAAG,IAAIZ,UAAU,CAACQ,cAAc,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,WAAW,CAAC;EAC3F,CAAC,CAAC;EAEFI,EAAE,CAAC,mCAAmC,EAAE,YAAY;IAClD,MAAMC,QAAQ,GAAG,IAAIZ,IAAI,CAAC,CAAC,IAAIa,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAErDf,MAAM,CAA0BgB,kBAAkB,CAAC,OAAO;MACzDC,IAAI,EAAEd,IAAI,CAACe,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAClB,YAAY;IAChD,CAAC,CAAC,CAAC;IAEH,MAAMmB,MAAM,GAAG,MAAMV,UAAU,CAACW,UAAU,CAACP,QAAQ,CAAC;IAEpDQ,MAAM,CAACF,MAAM,CAAC,CAACG,OAAO,CAAC,oEAAoE,CAAC;EAC9F,CAAC,CAAC;EAEFV,EAAE,CAAC,yCAAyC,EAAE,YAAY;IACxD,MAAMC,QAAQ,GAAG,IAAIZ,IAAI,CAAC,CAAC,IAAIa,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAErDf,MAAM,CAA0BgB,kBAAkB,CAAC,OAAO;MACzDC,IAAI,EAAEd,IAAI,CAACe,EAAE,CAAC,CAAC,CAACM,iBAAiB,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,MAAMH,MAAM,CAACZ,UAAU,CAACW,UAAU,CAACP,QAAQ,CAAC,CAAC,CAACY,OAAO,CAACC,OAAO,CAAC,eAAe,CAAC;EAChF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}