{"version":3,"file":"validate-local-directory.test.js","names":["fs","path","TokenMetadataValidator","dictionary","jest","mock","mockReadDirSync","readdirSync","mockReadFileSync","readFileSync","describe","beforeEach","clearAllMocks","it","mockReturnValue","validationResult","validateLocalDirectory","expect","isValid","toBe","errors","general","toContain","validation","directoryIsEmpty","mockFiles","mockContent","JSON","stringify","name","image","type","mockImplementation","filePath","includes","directoryPath","toHaveBeenCalledTimes","forEach","file","endsWith","toHaveBeenCalledWith","join"],"sources":["../../../../../src/test/unit/hip412-validation/validate-local-directory.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport path from 'path';\nimport { TokenMetadataValidator } from '../../../token-metadata-validator';\nimport { dictionary } from '../../../utils/constants/dictionary';\n\njest.mock('fs');\nconst mockReadDirSync = fs.readdirSync as jest.Mock;\nconst mockReadFileSync = fs.readFileSync as jest.Mock;\n\ndescribe('TokenMetadataValidator.validateLocalDirectory', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should return an error if the directory is empty', () => {\n    mockReadDirSync.mockReturnValue([]);\n\n    const validationResult = TokenMetadataValidator.validateLocalDirectory('mock/empty/directory');\n    expect(validationResult.isValid).toBe(false);\n    expect(validationResult.errors[0].general).toContain(dictionary.validation.directoryIsEmpty);\n  });\n\n  it('should validate only .txt and .json files', () => {\n    const mockFiles = ['valid_file.json', 'another_valid_file.txt', 'ignore_this.md', '.gitkeep'];\n    mockReadDirSync.mockReturnValue(mockFiles);\n\n    const mockContent = JSON.stringify({\n      name: 'Test NFT',\n      image: 'https://nft.com/mycollection/1.jpg',\n      type: 'image/jpeg',\n    });\n\n    mockReadFileSync.mockImplementation((filePath) => {\n      if (filePath.includes('.json') || filePath.includes('.txt')) {\n        return mockContent;\n      }\n      return null;\n    });\n\n    const directoryPath = 'mock/directory';\n    const validationResult = TokenMetadataValidator.validateLocalDirectory(directoryPath);\n\n    expect(mockReadFileSync).toHaveBeenCalledTimes(2);\n    mockFiles.forEach((file) => {\n      if (file.endsWith('.json') || file.endsWith('.txt')) {\n        expect(mockReadFileSync).toHaveBeenCalledWith(path.join(directoryPath, file), 'utf8');\n      }\n    });\n\n    expect(validationResult.isValid).toBe(true);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,UAAU,QAAQ,qCAAqC;AAEhEC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;AACf,MAAMC,eAAe,GAAGN,EAAE,CAACO,WAAwB;AACnD,MAAMC,gBAAgB,GAAGR,EAAE,CAACS,YAAyB;AAErDC,QAAQ,CAAC,+CAA+C,EAAE,MAAM;EAC9DC,UAAU,CAAC,MAAM;IACfP,IAAI,CAACQ,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,kDAAkD,EAAE,MAAM;IAC3DP,eAAe,CAACQ,eAAe,CAAC,EAAE,CAAC;IAEnC,MAAMC,gBAAgB,GAAGb,sBAAsB,CAACc,sBAAsB,CAAC,sBAAsB,CAAC;IAC9FC,MAAM,CAACF,gBAAgB,CAACG,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC5CF,MAAM,CAACF,gBAAgB,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAACC,SAAS,CAACnB,UAAU,CAACoB,UAAU,CAACC,gBAAgB,CAAC;EAC9F,CAAC,CAAC;EAEFX,EAAE,CAAC,2CAA2C,EAAE,MAAM;IACpD,MAAMY,SAAS,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,UAAU,CAAC;IAC7FnB,eAAe,CAACQ,eAAe,CAACW,SAAS,CAAC;IAE1C,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;MACjCC,IAAI,EAAE,UAAU;MAChBC,KAAK,EAAE,oCAAoC;MAC3CC,IAAI,EAAE;IACR,CAAC,CAAC;IAEFvB,gBAAgB,CAACwB,kBAAkB,CAAEC,QAAQ,IAAK;MAChD,IAAIA,QAAQ,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAID,QAAQ,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC3D,OAAOR,WAAW;MACpB;MACA,OAAO,IAAI;IACb,CAAC,CAAC;IAEF,MAAMS,aAAa,GAAG,gBAAgB;IACtC,MAAMpB,gBAAgB,GAAGb,sBAAsB,CAACc,sBAAsB,CAACmB,aAAa,CAAC;IAErFlB,MAAM,CAACT,gBAAgB,CAAC,CAAC4B,qBAAqB,CAAC,CAAC,CAAC;IACjDX,SAAS,CAACY,OAAO,CAAEC,IAAI,IAAK;MAC1B,IAAIA,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAID,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACnDtB,MAAM,CAACT,gBAAgB,CAAC,CAACgC,oBAAoB,CAACvC,IAAI,CAACwC,IAAI,CAACN,aAAa,EAAEG,IAAI,CAAC,EAAE,MAAM,CAAC;MACvF;IACF,CAAC,CAAC;IAEFrB,MAAM,CAACF,gBAAgB,CAACG,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC7C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}