{"version":3,"file":"validate-metadata-from-on-chain-collection.test.js","names":["axios","getNFTsFromToken","NFT_FROM_TOKEN_EXAMPLE_BASE_URL","NETWORK_ERROR","jest","mock","mockedAxios","mockResponsePage1","data","nfts","id","name","links","next","mockResponsePage2","describe","beforeEach","get","mockReset","it","mockResolvedValueOnce","result","expect","length","toBe","toHaveBeenCalledTimes","mockRejectedValue","Error","rejects","toThrow"],"sources":["../../../../../src/test/unit/hip412-validation/validate-metadata-from-on-chain-collection.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport axios from 'axios';\nimport { getNFTsFromToken } from '../../../api/mirror-node';\nimport { NFT_FROM_TOKEN_EXAMPLE_BASE_URL, NETWORK_ERROR } from '../../__mocks__/consts';\n\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\nconst mockResponsePage1 = {\n  data: {\n    nfts: [\n      { id: 1, name: 'NFT 1' },\n      { id: 2, name: 'NFT 2' },\n    ],\n    links: { next: NFT_FROM_TOKEN_EXAMPLE_BASE_URL },\n  },\n};\n\nconst mockResponsePage2 = {\n  data: {\n    nfts: [{ id: 3, name: 'NFT 3' }],\n    links: { next: null },\n  },\n};\n\ndescribe('getNFTsFromToken', () => {\n  beforeEach(() => {\n    mockedAxios.get.mockReset();\n  });\n\n  it('fetches all pages of NFTs collection correctly', async () => {\n    mockedAxios.get.mockResolvedValueOnce(mockResponsePage1).mockResolvedValueOnce(mockResponsePage2);\n\n    const result = await getNFTsFromToken('testnet', '1');\n    expect(result.length).toBe(3);\n    expect(mockedAxios.get).toHaveBeenCalledTimes(2);\n  });\n\n  it('properly handles HTTP errors', async () => {\n    mockedAxios.get.mockRejectedValue(new Error(NETWORK_ERROR));\n    await expect(getNFTsFromToken('testnet', '1')).rejects.toThrow(NETWORK_ERROR);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,+BAA+B,EAAEC,aAAa,QAAQ,wBAAwB;AAEvFC,IAAI,CAACC,IAAI,CAAC,OAAO,CAAC;AAClB,MAAMC,WAAW,GAAGN,KAAkC;AAEtD,MAAMO,iBAAiB,GAAG;EACxBC,IAAI,EAAE;IACJC,IAAI,EAAE,CACJ;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAC,EACxB;MAAED,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAC,CACzB;IACDC,KAAK,EAAE;MAAEC,IAAI,EAAEX;IAAgC;EACjD;AACF,CAAC;AAED,MAAMY,iBAAiB,GAAG;EACxBN,IAAI,EAAE;IACJC,IAAI,EAAE,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAC,CAAC;IAChCC,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAK;EACtB;AACF,CAAC;AAEDE,QAAQ,CAAC,kBAAkB,EAAE,MAAM;EACjCC,UAAU,CAAC,MAAM;IACfV,WAAW,CAACW,GAAG,CAACC,SAAS,CAAC,CAAC;EAC7B,CAAC,CAAC;EAEFC,EAAE,CAAC,gDAAgD,EAAE,YAAY;IAC/Db,WAAW,CAACW,GAAG,CAACG,qBAAqB,CAACb,iBAAiB,CAAC,CAACa,qBAAqB,CAACN,iBAAiB,CAAC;IAEjG,MAAMO,MAAM,GAAG,MAAMpB,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC;IACrDqB,MAAM,CAACD,MAAM,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7BF,MAAM,CAAChB,WAAW,CAACW,GAAG,CAAC,CAACQ,qBAAqB,CAAC,CAAC,CAAC;EAClD,CAAC,CAAC;EAEFN,EAAE,CAAC,8BAA8B,EAAE,YAAY;IAC7Cb,WAAW,CAACW,GAAG,CAACS,iBAAiB,CAAC,IAAIC,KAAK,CAACxB,aAAa,CAAC,CAAC;IAC3D,MAAMmB,MAAM,CAACrB,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC2B,OAAO,CAACC,OAAO,CAAC1B,aAAa,CAAC;EAC/E,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}