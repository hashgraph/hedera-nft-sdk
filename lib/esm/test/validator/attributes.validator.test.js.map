{"version":3,"file":"attributes.validator.test.js","names":["attributesValidator","validMetadata","describe","test","metadata","JSON","parse","stringify","errors","expect","Array","isArray","toBe","length","attributes","trait_type","display_type","value","msg","type"],"sources":["../../../../src/test/validator/attributes.validator.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { attributesValidator } from '../../validator/validators/attributes';\nimport validMetadata from './data/valid-HIP412';\n\ndescribe('Attributes validator tests', () => {\n  test('it should return an empty array when passing a correct schema', () => {\n    // Arrange\n    const metadata = JSON.parse(JSON.stringify(validMetadata));\n\n    // Act\n    const errors = attributesValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(0);\n  });\n\n  describe('Boost display type tests', () => {\n    test('it should not return an error for a correct `display_type=boost`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [{ trait_type: 'Background', display_type: 'boost', value: 100 }];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(0);\n    });\n\n    test('it should return an error for wrong type for `display_type=boost`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [{ trait_type: 'Background', display_type: 'boost', value: 'Yellow' }];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(1);\n      expect(errors[0].msg).toBe(\"Trait Background of type 'boost' requires number, found string\");\n      expect(errors[0].type).toBe('attribute');\n    });\n  });\n\n  describe('Percentage display type tests', () => {\n    test('it should not return an error for a correct `display_type=percentage`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [{ trait_type: 'Background', display_type: 'percentage', value: 100 }];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(0);\n    });\n\n    test('it should return an error for wrong type for `display_type=percentage`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [{ trait_type: 'Background', display_type: 'percentage', value: '101' }];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(1);\n      expect(errors[0].msg).toBe(\"Trait Background of type 'percentage' requires number, found string\");\n      expect(errors[0].type).toBe('attribute');\n    });\n\n    test('it should return an error for wrong value for `display_type=percentage`', () => {\n      // Arrange\n      // Metatadata with percentage being higher than 100\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [{ trait_type: 'Background', display_type: 'percentage', value: 101 }];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(1);\n      expect(errors[0].msg).toBe(\"Trait Background of type 'percentage' must be between [0-100], found 101\");\n      expect(errors[0].type).toBe('attribute');\n    });\n  });\n\n  describe('Color display type tests', () => {\n    test('it should not return an error for a correct `display_type=color`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [\n        {\n          trait_type: 'Background',\n          display_type: 'color',\n          value: 'rgb(101,50,1)',\n        },\n      ];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(0);\n    });\n\n    test('it should return an error for wrong format RGB values of `display_type=color`', () => {\n      // Arrange\n      // Metadata error: RGB value has an extra space\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [\n        {\n          trait_type: 'Background',\n          display_type: 'color',\n          value: 'rgb (101,50,1)',\n        },\n      ];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(1);\n      expect(errors[0].msg).toBe(\"Trait Background of type 'color' requires format 'rgb(number,number,number)'\");\n      expect(errors[0].type).toBe('attribute');\n    });\n\n    test('it should return an error for wrong RGB number for `display_type=color`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [\n        {\n          trait_type: 'Background',\n          display_type: 'color',\n          value: 'rgb(101,256,1)',\n        },\n      ];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(1);\n      expect(errors[0].msg).toBe(\"Trait Background of type 'color' requires RGB values between [0-255], got value: 256\");\n      expect(errors[0].type).toBe('attribute');\n    });\n  });\n\n  describe('Datetime and date display type tests', () => {\n    test('it should not return an error for a correct `display_type=datetime` or `display_type=date`', () => {\n      // Arrange\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [\n        {\n          trait_type: 'Background',\n          display_type: 'datetime',\n          value: 732844800,\n        },\n        { trait_type: 'Background', display_type: 'date', value: 732844800 },\n      ];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(0);\n    });\n\n    test('it should return an error for wrong type for `display_type=datetime` or `display_type=date`', () => {\n      // Arrange\n      // Metatadata with percentage being of type string\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n      metadata.attributes = [\n        {\n          trait_type: 'Background',\n          display_type: 'datetime',\n          value: '732844800',\n        },\n        { trait_type: 'Background', display_type: 'date', value: '732844800' },\n      ];\n\n      // Act\n      const errors = attributesValidator(metadata);\n\n      // Assert\n      expect(Array.isArray(errors)).toBe(true);\n      expect(errors.length).toBe(2);\n      expect(errors[0].msg).toBe(\"Trait Background of type 'datetime' requires integer value, got type: string\");\n      expect(errors[0].type).toBe('attribute');\n      expect(errors[1].msg).toBe(\"Trait Background of type 'date' requires integer value, got type: string\");\n      expect(errors[1].type).toBe('attribute');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}