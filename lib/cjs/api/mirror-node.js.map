{"version":3,"file":"mirror-node.js","names":["_axios","_interopRequireDefault","require","_dictionary","_errorToMessage","_getMirrorNodeUrlForNetwork","obj","__esModule","default","getMetaDataFromMirrorNode","network","nftId","mirrorNodeUrl","url","getMirrorNodeUrlForNetwork","response","axios","get","tokenId","toString","serial","atob","data","metadata","exports","getLastOwnershipTransferForNft","serialNumber","baseUrl","nextLink","requiredTransaction","transactions","find","transaction","type","links","next","URL","href","error","Error","errorToMessage","getNFTsFromToken","limit","arguments","length","undefined","allNFTs","push","nfts","getSingleNFTDetails","nftURL","dictionary","errors","unknownErrorWhileFetching","getMetadataObjectsForValidation","isSuccessful","errorMessage","ipfsFailedToFetch","isAxiosError","status","tooManyRequests","statusText"],"sources":["../../../src/api/mirror-node.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { NftId } from '@hashgraph/sdk';\nimport axios from 'axios';\nimport { NFTDetails, NFTS, NFTTransactions, NFTTransactionsRequest } from '../types/nfts';\nimport { dictionary } from '../utils/constants/dictionary';\nimport { errorToMessage } from '../helpers/error-to-message';\nimport { NetworkName } from '@hashgraph/sdk/lib/client/Client';\nimport { getMirrorNodeUrlForNetwork } from '../utils/hedera/get-mirror-node-url-for-network';\nimport { MetadataObject } from '../types/csv';\nimport { NFTMetadata } from '../types/nft-metadata';\n\nexport type MetadataFromMirrorNode = {\n  isSuccessful: boolean;\n  metadata?: MetadataObject | NFTMetadata;\n  serialNumber: number;\n  error?: string;\n};\n\nexport const getMetaDataFromMirrorNode = async (network: NetworkName, nftId: NftId, mirrorNodeUrl?: string): Promise<string> => {\n  const url = mirrorNodeUrl || getMirrorNodeUrlForNetwork(network);\n  const response = await axios.get(`${url}/tokens/${nftId.tokenId.toString()}/nfts/${nftId.serial.toString()}`);\n  return atob(response.data.metadata);\n};\n\nexport const getLastOwnershipTransferForNft = async (\n  network: NetworkName,\n  tokenId: string,\n  serialNumber: number,\n  mirrorNodeUrl?: string\n): Promise<NFTTransactions | undefined> => {\n  const baseUrl = mirrorNodeUrl || getMirrorNodeUrlForNetwork(network);\n  let nextLink: string = `${baseUrl}/tokens/${tokenId}/nfts/${serialNumber}/transactions`;\n  let requiredTransaction: NFTTransactions | undefined;\n\n  do {\n    try {\n      const response = await axios.get<NFTTransactionsRequest>(nextLink);\n      // We take the first 'CRYPTOTRANSFER' or 'TOKENMINT' transaction because these transactions represent the change of ownership of an NFT.\n      // 'CRYPTOTRANSFER' indicates that the NFT was transferred from one account to another, while 'TOKENMINT' indicates that a new NFT was minted.\n      // By taking the first of these transactions, we can determine the last owner of the NFT and the time when they became the owner\n      requiredTransaction = response.data.transactions.find(\n        (transaction) => transaction.type === 'CRYPTOTRANSFER' || transaction.type === 'TOKENMINT'\n      );\n      if (requiredTransaction) break;\n      nextLink = response.data.links.next ? new URL(response.data.links.next, baseUrl).href : '';\n    } catch (error) {\n      throw new Error(errorToMessage(error));\n    }\n  } while (nextLink);\n  return requiredTransaction;\n};\n\nexport async function getNFTsFromToken(network: NetworkName, tokenId: string, limit: number = 100): Promise<NFTDetails[]> {\n  const baseUrl = getMirrorNodeUrlForNetwork(network);\n  let nextLink: string = `${baseUrl}/tokens/${tokenId}/nfts?limit=${limit}`;\n  const allNFTs: NFTDetails[] = [];\n\n  do {\n    try {\n      const response = await axios.get<NFTS>(nextLink);\n      allNFTs.push(...response.data.nfts);\n      nextLink = response.data.links.next ? new URL(response.data.links.next, baseUrl).href : '';\n    } catch (error) {\n      throw new Error(errorToMessage(error));\n    }\n  } while (nextLink);\n  return allNFTs;\n}\n\nexport async function getSingleNFTDetails(network: NetworkName, tokenId: string, serialNumber: number): Promise<NFTDetails> {\n  const baseUrl = getMirrorNodeUrlForNetwork(network);\n  const nftURL = `${baseUrl}/tokens/${tokenId}/nfts/${serialNumber}`;\n\n  try {\n    const { data } = await axios.get<NFTDetails>(nftURL);\n    return data;\n  } catch (error) {\n    throw new Error(`${dictionary.errors.unknownErrorWhileFetching(serialNumber)},\n    ${errorToMessage(error)}`);\n  }\n}\n\nexport async function getMetadataObjectsForValidation(url: string, serialNumber: number): Promise<MetadataFromMirrorNode> {\n  try {\n    const response = await axios.get(url);\n    return {\n      isSuccessful: true,\n      metadata: response.data,\n      serialNumber,\n    };\n  } catch (error) {\n    let errorMessage = dictionary.errors.ipfsFailedToFetch as string;\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 429) {\n        errorMessage = dictionary.errors.tooManyRequests(error.response.statusText, error.response.status);\n      } else {\n        errorMessage = dictionary.errors.unknownErrorWhileFetching(serialNumber);\n      }\n    }\n\n    return {\n      isSuccessful: false,\n      serialNumber,\n      error: errorMessage,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}