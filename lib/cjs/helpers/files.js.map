{"version":3,"file":"files.js","names":["_fs","_interopRequireDefault","require","_path","obj","__esModule","default","readFiles","dir","filenames","JSONdata","forEach","filename","data","fs","readFileSync","path","join","encoding","flag","push","filedata","JSON","parse","exports","getJSONFilesForDir","directoryPath","files","readdirSync","withFileTypes","JSONFiles","file","extname","name"],"sources":["../../../src/helpers/files.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport path from 'path';\n\nimport { Instance } from '../types/validator';\n\n/**\n * @param dir Absolute path to file you want to read contents for\n * @param filenames An array of filenames\n * @returns Array of objects containing a filename and filedata\n */\nexport const readFiles = (dir: string, filenames: string[]): { filename: string; filedata: Instance }[] => {\n  const JSONdata: { filename: string; filedata: Instance }[] = [];\n\n  filenames.forEach((filename) => {\n    const data = fs.readFileSync(path.join(dir, filename), { encoding: 'utf8', flag: 'r' });\n    JSONdata.push({\n      filename,\n      filedata: JSON.parse(data),\n    });\n  });\n\n  return JSONdata;\n};\n\n/**\n * @param dir Absolute path to folder you want to validate\n * @returns An array of filenames with extension\n */\nexport const getJSONFilesForDir = (dir: string): string[] => {\n  const directoryPath = dir;\n\n  const files = fs.readdirSync(directoryPath, { withFileTypes: true });\n\n  const JSONFiles: string[] = [];\n  files.forEach((file) => {\n    if (path.extname(file.name) === '.json') JSONFiles.push(file.name);\n  });\n\n  return JSONFiles;\n};\n"],"mappings":";;;;;;AAmBA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAwB,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AApBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACO,MAAMG,SAAS,GAAGA,CAACC,GAAW,EAAEC,SAAmB,KAAiD;EACzG,MAAMC,QAAoD,GAAG,EAAE;EAE/DD,SAAS,CAACE,OAAO,CAAEC,QAAQ,IAAK;IAC9B,MAAMC,IAAI,GAAGC,WAAE,CAACC,YAAY,CAACC,aAAI,CAACC,IAAI,CAACT,GAAG,EAAEI,QAAQ,CAAC,EAAE;MAAEM,QAAQ,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAI,CAAC,CAAC;IACvFT,QAAQ,CAACU,IAAI,CAAC;MACZR,QAAQ;MACRS,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACV,IAAI;IAC3B,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOH,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AAHAc,OAAA,CAAAjB,SAAA,GAAAA,SAAA;AAIO,MAAMkB,kBAAkB,GAAIjB,GAAW,IAAe;EAC3D,MAAMkB,aAAa,GAAGlB,GAAG;EAEzB,MAAMmB,KAAK,GAAGb,WAAE,CAACc,WAAW,CAACF,aAAa,EAAE;IAAEG,aAAa,EAAE;EAAK,CAAC,CAAC;EAEpE,MAAMC,SAAmB,GAAG,EAAE;EAC9BH,KAAK,CAAChB,OAAO,CAAEoB,IAAI,IAAK;IACtB,IAAIf,aAAI,CAACgB,OAAO,CAACD,IAAI,CAACE,IAAI,CAAC,KAAK,OAAO,EAAEH,SAAS,CAACV,IAAI,CAACW,IAAI,CAACE,IAAI,CAAC;EACpE,CAAC,CAAC;EAEF,OAAOH,SAAS;AAClB,CAAC;AAACN,OAAA,CAAAC,kBAAA,GAAAA,kBAAA","ignoreList":[]}