{"version":3,"file":"index.js","names":["_dateFns","require","_dictionary","_mirrorNode","getHolderAndDuration","_ref","tokenId","serialNumber","network","nftDetailsData","getSingleNFTDetails","deleted","Error","dictionary","errors","nftDeleted","transactionsData","getLastOwnershipTransferForNft","nftNoTransactions","date","fromUnixTime","Number","consensus_timestamp","readableDate","formatISO","holder","receiver_account_id","holderSince","exports"],"sources":["../../../src/get-holder-and-duration/index.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { formatISO, fromUnixTime } from 'date-fns';\nimport { dictionary } from '../utils/constants/dictionary';\nimport { getSingleNFTDetails, getLastOwnershipTransferForNft } from '../api/mirror-node';\nimport { NetworkName } from '@hashgraph/sdk/lib/client/Client';\n\nexport const getHolderAndDuration = async ({\n  tokenId,\n  serialNumber,\n  network,\n}: {\n  tokenId: string;\n  serialNumber: number;\n  network: NetworkName;\n}) => {\n  const nftDetailsData = await getSingleNFTDetails(network, tokenId, serialNumber);\n\n  if (nftDetailsData.deleted) {\n    throw new Error(dictionary.errors.nftDeleted);\n  }\n\n  const transactionsData = await getLastOwnershipTransferForNft(network, tokenId, serialNumber);\n\n  if (!transactionsData) {\n    throw new Error(dictionary.errors.nftNoTransactions);\n  }\n\n  const date = fromUnixTime(Number(transactionsData.consensus_timestamp));\n  const readableDate = formatISO(date);\n\n  return {\n    holder: transactionsData.receiver_account_id,\n    holderSince: readableDate,\n  };\n};\n"],"mappings":";;;;;;AAmBA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMO,MAAMG,oBAAoB,GAAG,MAAAC,IAAA,IAQ9B;EAAA,IARqC;IACzCC,OAAO;IACPC,YAAY;IACZC;EAKF,CAAC,GAAAH,IAAA;EACC,MAAMI,cAAc,GAAG,MAAM,IAAAC,+BAAmB,EAACF,OAAO,EAAEF,OAAO,EAAEC,YAAY,CAAC;EAEhF,IAAIE,cAAc,CAACE,OAAO,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAACC,sBAAU,CAACC,MAAM,CAACC,UAAU,CAAC;EAC/C;EAEA,MAAMC,gBAAgB,GAAG,MAAM,IAAAC,0CAA8B,EAACT,OAAO,EAAEF,OAAO,EAAEC,YAAY,CAAC;EAE7F,IAAI,CAACS,gBAAgB,EAAE;IACrB,MAAM,IAAIJ,KAAK,CAACC,sBAAU,CAACC,MAAM,CAACI,iBAAiB,CAAC;EACtD;EAEA,MAAMC,IAAI,GAAG,IAAAC,qBAAY,EAACC,MAAM,CAACL,gBAAgB,CAACM,mBAAmB,CAAC,CAAC;EACvE,MAAMC,YAAY,GAAG,IAAAC,kBAAS,EAACL,IAAI,CAAC;EAEpC,OAAO;IACLM,MAAM,EAAET,gBAAgB,CAACU,mBAAmB;IAC5CC,WAAW,EAAEJ;EACf,CAAC;AACH,CAAC;AAACK,OAAA,CAAAxB,oBAAA,GAAAA,oBAAA","ignoreList":[]}