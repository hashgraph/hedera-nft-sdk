{"version":3,"file":"validator.test.js","names":["_validHIP","_interopRequireDefault","require","obj","__esModule","default","Validator","defaultSchemaVersion","describe","test","validator","metadata","JSON","parse","stringify","validMetadata","schemaProblems","validate","expect","Array","isArray","errors","toBe","warnings","length","version","schema","getSchema","metadataCopy","description","attributes","localization","uri","locales","validationResults","type","name","image","checksum","trait_type","value"],"sources":["../../../../src/test/validator/validator.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nconst { Validator, defaultSchemaVersion } = require('../../validator');\nimport validMetadata from './data/valid-HIP412';\n\ndescribe('Validator function tests', () => {\n  describe('Schema version tests', () => {\n    test('it should not return errors for a valid metadata JSON using default schema', () => {\n      // Arrange\n      const validator = new Validator();\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n\n      // Act\n      const schemaProblems = validator.validate(metadata, defaultSchemaVersion);\n\n      // Assert\n      expect(Array.isArray(schemaProblems.errors)).toBe(true);\n      expect(Array.isArray(schemaProblems.warnings)).toBe(true);\n      expect(schemaProblems.warnings.length).toBe(0);\n      expect(schemaProblems.errors.length).toBe(0);\n    });\n\n    test('it should not return errors for a valid metadata JSON using schema version v1.0.0', () => {\n      // Arrange\n      const validator = new Validator();\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n\n      // Act\n      const schemaProblems = validator.validate(metadata, '1.0.0');\n\n      // Assert\n      expect(schemaProblems.warnings.length).toBe(0);\n      expect(schemaProblems.errors.length).toBe(0);\n    });\n\n    test('it should not return errors for a valid metadata JSON not passing a schema version (using default version)', () => {\n      // Arrange\n      const validator = new Validator();\n      const metadata = JSON.parse(JSON.stringify(validMetadata));\n\n      // Act\n      const schemaProblems = validator.validate(metadata);\n\n      // Assert\n      expect(schemaProblems.warnings.length).toBe(0);\n      expect(schemaProblems.errors.length).toBe(0);\n    });\n  });\n\n  describe('Schema package tests', () => {\n    test('it should return a schema object for a valid version in the schema map', () => {\n      // Arrange\n      const validator = new Validator();\n      const version = defaultSchemaVersion;\n\n      // Act\n      const schema = validator.getSchema(version);\n\n      // Assert\n      expect(typeof schema).toBe('object');\n      expect(schema.version).toBe(defaultSchemaVersion);\n    });\n\n    test('it should return the default schema object for an unsupported version in the schema map', () => {\n      // Arrange\n      const validator = new Validator();\n      const version = '2.5.10'; // Unsupported version\n\n      // Act\n      const schema = validator.getSchema(version);\n\n      // Assert\n      expect(typeof schema).toBe('object');\n      expect(schema.version).toBe(defaultSchemaVersion);\n    });\n\n    test('it should return the default schema object for an unsupported value as version', () => {\n      // Arrange\n      const validator = new Validator();\n      const version = 'notaschema'; // Unsupported version\n\n      // Act\n      const schema = validator.getSchema(version);\n\n      // Assert\n      expect(typeof schema).toBe('object');\n      expect(schema.version).toBe(defaultSchemaVersion);\n    });\n  });\n\n  describe('Validator errors', () => {\n    test('it should only return schema errors when the metadata contains schema errors and also other types of errors like attribute and localization', () => {\n      // Arrange\n      const validator = new Validator();\n      const metadataCopy = JSON.parse(JSON.stringify(validMetadata));\n      const metadata = {\n        // missing name, image, and type for HIP412@1.0.0\n        description: metadataCopy.description,\n        attributes: metadataCopy.attributes,\n        localization: {\n          uri: 'ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/{locale}.json',\n          default: 'en',\n          locales: ['es', 'fr', 'en'], // error: default locale should not be included in locales array\n        },\n      };\n\n      // Act\n      const validationResults = validator.validate(metadata, defaultSchemaVersion);\n\n      // Assert\n      expect(validationResults.errors.length).toBe(3);\n      expect(validationResults.errors[0].type).toBe('schema');\n      expect(validationResults.errors[1].type).toBe('schema');\n      expect(validationResults.errors[2].type).toBe('schema');\n    });\n\n    test('it should return all types of errors when there are no schema errors', () => {\n      // Arrange\n      const validator = new Validator();\n      const metadataCopy = JSON.parse(JSON.stringify(validMetadata));\n      const metadata = {\n        name: 'myname',\n        image: 'ipfs://QmaHVnnp7qAmGADa3tQfWVNxxZDRmTL5r6jKrAo16mSd5y/2344.png',\n        type: 'image/png',\n        description: metadataCopy.description,\n        attributes: metadataCopy.attributes,\n        localization: {\n          uri: 'ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/{locale}.json',\n          default: 'en',\n          locales: ['es', 'fr', 'en'], // error: default locale should not be included in locales array\n        },\n      };\n\n      // Act\n      const validationResults = validator.validate(metadata, defaultSchemaVersion);\n\n      // Assert\n      expect(validationResults.errors.length).toBe(1);\n      expect(validationResults.errors[0].type).toBe('localization');\n    });\n\n    test('it should return all types of errors even when there are additional property warnings and no schema errors', () => {\n      // Arrange\n      const validator = new Validator();\n      const metadataCopy = JSON.parse(JSON.stringify(validMetadata));\n      const metadata = {\n        name: 'myname',\n        image: 'ipfs://QmaHVnnp7qAmGADa3tQfWVNxxZDRmTL5r6jKrAo16mSd5y/2344.png',\n        type: 'image/png',\n        description: metadataCopy.description,\n        attributes: [{ checksum: 'randomvalue', trait_type: 'Fur', value: 'Gold' }],\n        localization: {\n          uri: 'ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/{locale}.json',\n          default: 'en',\n          locales: ['es', 'fr', 'en'], // error: default locale should not be included in locales array\n        },\n      };\n\n      // Act\n      const validationResults = validator.validate(metadata, defaultSchemaVersion);\n\n      // Assert\n      expect(validationResults.warnings.length).toBe(1);\n      expect(validationResults.errors.length).toBe(1);\n      expect(validationResults.errors[0].type).toBe('localization');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}