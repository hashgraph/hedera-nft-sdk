{"version":3,"file":"localization.validator.test.js","names":["_validHIP","_interopRequireDefault","require","obj","__esModule","default","localizationValidator","localization","uri","locales","describe","test","metadata","validMetadata","errors","expect","Array","isArray","toBe","length","JSON","parse","stringify","msg","type","push"],"sources":["../../../../src/test/validator/localization.validator.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nconst { localizationValidator } = require('../../validator/validators/localization');\nimport validMetadata from './data/valid-HIP412';\n\nconst localization = {\n  uri: 'ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/{locale}.json',\n  default: 'en',\n  locales: ['es', 'fr'],\n};\n\ndescribe('Localization validator tests', () => {\n  test('it should not return an error if the `localization` is property is not present', () => {\n    // Arrange\n    // Metatadata with attribute error\n    const metadata = validMetadata;\n\n    // Act\n    const errors = localizationValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(0);\n  });\n\n  test('it should return an empty array when passing a correct schema', () => {\n    // Arrange\n    const metadata = JSON.parse(JSON.stringify(validMetadata));\n    metadata.localization = localization;\n\n    // Act\n    const errors = localizationValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(0);\n  });\n\n  test('it should return an error for incorrect default language code', () => {\n    // Arrange\n    const metadata = JSON.parse(JSON.stringify(validMetadata));\n    metadata.localization = JSON.parse(JSON.stringify(localization));\n    metadata.localization.default = 'eng';\n\n    // Act\n    const errors = localizationValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(1);\n    expect(errors[0].msg).toBe('Default locale should be two-letter language code, got: eng');\n    expect(errors[0].type).toBe('localization');\n  });\n\n  test('it should return an error for incorrect language code in `localization.locales`', () => {\n    // Arrange\n    const metadata = JSON.parse(JSON.stringify(validMetadata));\n    metadata.localization = JSON.parse(JSON.stringify(localization));\n    metadata.localization.locales.push('ger');\n\n    // Act\n    const errors = localizationValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(1);\n    expect(errors[0].msg).toBe('Locale should be two-letter language code, got: ger');\n    expect(errors[0].type).toBe('localization');\n  });\n\n  test('it should return an error if default locale appears in `localization.locales`', () => {\n    // Arrange\n    const metadata = JSON.parse(JSON.stringify(validMetadata));\n    metadata.localization = JSON.parse(JSON.stringify(localization));\n    metadata.localization.locales.push('nl');\n    metadata.localization.default = 'nl';\n\n    // Act\n    const errors = localizationValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(1);\n    expect(errors[0].msg).toBe(\"Default locale should not appear in 'localization.locales'\");\n    expect(errors[0].type).toBe('localization');\n  });\n\n  test('it should return an error for incorrect `localization.URI` format', () => {\n    // Arrange\n    const metadata = JSON.parse(JSON.stringify(validMetadata));\n    metadata.localization = JSON.parse(JSON.stringify(localization));\n    metadata.localization.uri = 'ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/locale.json'; // no {} brackets around locale.json\n\n    // Act\n    const errors = localizationValidator(metadata);\n\n    // Assert\n    expect(Array.isArray(errors)).toBe(true);\n    expect(errors.length).toBe(1);\n    expect(errors[0].msg).toBe('URI should be of format <protocol>://<hash>/{locale}.json');\n    expect(errors[0].type).toBe('localization');\n  });\n});\n"],"mappings":"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","ignoreList":[]}