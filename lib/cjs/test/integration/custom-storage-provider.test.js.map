{"version":3,"file":"custom-storage-provider.test.js","names":["_uploadService","require","_fs","_interopRequireDefault","obj","__esModule","default","TestCustomService","uploadFile","exports","describe","filePath","fileBuffer","blob","beforeAll","fs","readFileSync","Blob","test","mockStorageConfig","uploadService","UploadService","result","uploadBlobFiles","expect","toBeDefined","url","toEqual"],"sources":["../../../../src/test/integration/custom-storage-provider.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { UploadService } from '../../services/upload-service';\nimport { FileStorage } from '../../types/file-storage-service';\nimport fs from 'fs';\n\nexport class TestCustomService implements FileStorage {\n  public async uploadFile(): Promise<string> {\n    return 'Test service is working';\n  }\n}\n\ndescribe('UploadService Integration Test', () => {\n  let filePath: string;\n  let fileBuffer: Buffer;\n  let blob: Blob;\n\n  beforeAll(() => {\n    filePath = 'src/test/__mocks__/exampleFiles/photo.jpeg';\n    fileBuffer = fs.readFileSync(filePath);\n    blob = new Blob([fileBuffer]);\n  });\n\n  test('should upload files successfully using MockStorageService', async () => {\n    const mockStorageConfig = new TestCustomService();\n    const uploadService = new UploadService(mockStorageConfig);\n    const result = await uploadService.uploadBlobFiles([blob]);\n    expect(result).toBeDefined();\n    expect(result[0].url).toEqual('Test service is working');\n  });\n});\n"],"mappings":";;;;;;AAmBA,IAAAA,cAAA,GAAAC,OAAA;AAEA,IAAAC,GAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAoB,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AArBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKO,MAAMG,iBAAiB,CAAwB;EACpD,MAAaC,UAAUA,CAAA,EAAoB;IACzC,OAAO,yBAAyB;EAClC;AACF;AAACC,OAAA,CAAAF,iBAAA,GAAAA,iBAAA;AAEDG,QAAQ,CAAC,gCAAgC,EAAE,MAAM;EAC/C,IAAIC,QAAgB;EACpB,IAAIC,UAAkB;EACtB,IAAIC,IAAU;EAEdC,SAAS,CAAC,MAAM;IACdH,QAAQ,GAAG,4CAA4C;IACvDC,UAAU,GAAGG,WAAE,CAACC,YAAY,CAACL,QAAQ,CAAC;IACtCE,IAAI,GAAG,IAAII,IAAI,CAAC,CAACL,UAAU,CAAC,CAAC;EAC/B,CAAC,CAAC;EAEFM,IAAI,CAAC,2DAA2D,EAAE,YAAY;IAC5E,MAAMC,iBAAiB,GAAG,IAAIZ,iBAAiB,CAAC,CAAC;IACjD,MAAMa,aAAa,GAAG,IAAIC,4BAAa,CAACF,iBAAiB,CAAC;IAC1D,MAAMG,MAAM,GAAG,MAAMF,aAAa,CAACG,eAAe,CAAC,CAACV,IAAI,CAAC,CAAC;IAC1DW,MAAM,CAACF,MAAM,CAAC,CAACG,WAAW,CAAC,CAAC;IAC5BD,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,CAACI,GAAG,CAAC,CAACC,OAAO,CAAC,yBAAyB,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}