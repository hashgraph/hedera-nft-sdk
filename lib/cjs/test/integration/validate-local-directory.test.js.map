{"version":3,"file":"validate-local-directory.test.js","names":["_tokenMetadataValidator","require","_dictionary","_consts","describe","it","validationResult","TokenMetadataValidator","validateLocalDirectory","EMPTY_JSON_DIRECTORY_PATH","expect","isValid","toBe","errors","length","toBeGreaterThan","general","toContain","dictionary","validation","directoryIsEmpty","NON_EMPTY_JSON_DIRECTORY_PATH","FILES_WITH_MIXED_EXTENSION_PATH"],"sources":["../../../../src/test/integration/validate-local-directory.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { TokenMetadataValidator } from '../../token-metadata-validator';\nimport { dictionary } from '../../utils/constants/dictionary';\nimport { EMPTY_JSON_DIRECTORY_PATH, NON_EMPTY_JSON_DIRECTORY_PATH, FILES_WITH_MIXED_EXTENSION_PATH } from '../__mocks__/consts';\n\ndescribe('TokenMetadataValidator.validateLocalDirectory integration tests', () => {\n  it('should return an error if the directory is empty', () => {\n    const validationResult = TokenMetadataValidator.validateLocalDirectory(EMPTY_JSON_DIRECTORY_PATH);\n    expect(validationResult.isValid).toBe(false);\n    expect(validationResult.errors.length).toBeGreaterThan(0);\n    expect(validationResult.errors[0].general).toContain(dictionary.validation.directoryIsEmpty);\n  });\n\n  it('should not return any errors if the directory contains valid JSON files', () => {\n    const validationResult = TokenMetadataValidator.validateLocalDirectory(NON_EMPTY_JSON_DIRECTORY_PATH);\n    expect(validationResult.isValid).toBe(true);\n    expect(validationResult.errors.length).toBe(0);\n  });\n\n  it('should not return any errors if the directory contains valid text files with extensions other than JSON', () => {\n    const validationResult = TokenMetadataValidator.validateLocalDirectory(FILES_WITH_MIXED_EXTENSION_PATH);\n    expect(validationResult.isValid).toBe(true);\n    expect(validationResult.errors.length).toBe(0);\n  });\n});\n"],"mappings":";;AAmBA,IAAAA,uBAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKAG,QAAQ,CAAC,iEAAiE,EAAE,MAAM;EAChFC,EAAE,CAAC,kDAAkD,EAAE,MAAM;IAC3D,MAAMC,gBAAgB,GAAGC,8CAAsB,CAACC,sBAAsB,CAACC,iCAAyB,CAAC;IACjGC,MAAM,CAACJ,gBAAgB,CAACK,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC5CF,MAAM,CAACJ,gBAAgB,CAACO,MAAM,CAACC,MAAM,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;IACzDL,MAAM,CAACJ,gBAAgB,CAACO,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,CAACC,SAAS,CAACC,sBAAU,CAACC,UAAU,CAACC,gBAAgB,CAAC;EAC9F,CAAC,CAAC;EAEFf,EAAE,CAAC,yEAAyE,EAAE,MAAM;IAClF,MAAMC,gBAAgB,GAAGC,8CAAsB,CAACC,sBAAsB,CAACa,qCAA6B,CAAC;IACrGX,MAAM,CAACJ,gBAAgB,CAACK,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC3CF,MAAM,CAACJ,gBAAgB,CAACO,MAAM,CAACC,MAAM,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;EAEFP,EAAE,CAAC,yGAAyG,EAAE,MAAM;IAClH,MAAMC,gBAAgB,GAAGC,8CAAsB,CAACC,sBAAsB,CAACc,uCAA+B,CAAC;IACvGZ,MAAM,CAACJ,gBAAgB,CAACK,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC3CF,MAAM,CAACJ,gBAAgB,CAACO,MAAM,CAACC,MAAM,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}