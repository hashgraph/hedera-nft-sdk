{"version":3,"file":"convert-metadata-objects-to-json-files.test.js","names":["_fs","_interopRequireDefault","require","_path","_zod","_hip412MetadataSchema","_convertMetadataObjectsToJsonFiles","_consts","_csvFileReader","_jsonMetadataFromCsvConverter","_csvConstants","obj","__esModule","default","describe","beforeEach","fs","existsSync","JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH","mkdirSync","recursive","afterEach","rmSync","force","it","csvParsedRows","readCSVFile","CSV_EXAMPLE_WITH_ALL_FIELDS","metadataObjects","parseCSVRowsToMetadataObjects","headerAttributes","ATTRIBUTES","headerProperties","PROPERTIES","result","convertMetadataObjectsToJsonFiles","savedJsonFilesLocation","expect","errors","toHaveLength","files","readdirSync","csvContent","readFileSync","csvRows","trim","split","length","expectedJsonFilesCount","AMOUNT_OF_HEADERS","toBe","LONG_E2E_TIMEOUT","Hip412MetadataSchema","z","object","Hip412MetadataCommonSchema","forEach","file","filePath","path","join","jsonData","JSON","parse","not","toThrow","limit","generatedFiles","CSV_EXAMPLE_ONLY_REQUIRED_FIELDS","CSV_EXAMPLE_ONLY_REQUIRED_FIELDS_AND_HEADERS","CSV_EXAMPLE_WITH_MISSING_REQUIRED_FIELDS"],"sources":["../../../../src/test/integration/convert-metadata-objects-to-json-files.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { Hip412MetadataCommonSchema } from '../../utils/validation-schemas/hip412-metadata-schema';\nimport { convertMetadataObjectsToJsonFiles } from '../../file-management/convert-metadata-objects-to-json-files';\nimport {\n  JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n  CSV_EXAMPLE_WITH_ALL_FIELDS,\n  CSV_EXAMPLE_ONLY_REQUIRED_FIELDS,\n  CSV_EXAMPLE_WITH_MISSING_REQUIRED_FIELDS,\n  CSV_EXAMPLE_ONLY_REQUIRED_FIELDS_AND_HEADERS,\n  LONG_E2E_TIMEOUT,\n} from '../__mocks__/consts';\nimport { readCSVFile } from '../../services/csv-file-reader';\nimport { parseCSVRowsToMetadataObjects } from '../../services/json-metadata-from-csv-converter';\nimport { ATTRIBUTES, PROPERTIES, AMOUNT_OF_HEADERS } from '../../utils/constants/csv-constants';\n\ndescribe('convertMetadataObjectsToJsonFiles Integration Test', () => {\n  beforeEach(() => {\n    if (!fs.existsSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH)) {\n      fs.mkdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH, { recursive: true });\n    }\n  });\n\n  afterEach(() => {\n    fs.rmSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH, { recursive: true, force: true });\n  });\n\n  it('convertMetadataObjectsToJsonFiles should complete without errors', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it(\n    'convertMetadataObjectsToJsonFiles should create correct number of JSON files based on the CSV file',\n    async () => {\n      const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n      const metadataObjects = parseCSVRowsToMetadataObjects({\n        csvParsedRows,\n        headerAttributes: ATTRIBUTES,\n        headerProperties: PROPERTIES,\n      });\n\n      await convertMetadataObjectsToJsonFiles({\n        metadataObjects,\n        savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n      });\n\n      const files = fs.readdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH);\n      const csvContent = fs.readFileSync(CSV_EXAMPLE_WITH_ALL_FIELDS, 'utf-8');\n      const csvRows = csvContent.trim().split('\\n').length;\n      const expectedJsonFilesCount = csvRows - AMOUNT_OF_HEADERS;\n\n      expect(files.length).toBe(expectedJsonFilesCount);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it('Each file should match Hip412MetadataSchema', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    const files = fs.readdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH);\n    const Hip412MetadataSchema = z.object(Hip412MetadataCommonSchema);\n\n    files.forEach((file) => {\n      const filePath = path.join(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH, file);\n      const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n\n      expect(() => Hip412MetadataSchema.parse(jsonData)).not.toThrow();\n    });\n  });\n\n  it('convertMetadataObjectsToJsonFiles should create a limited number of JSON files when nftsLimit is set', async () => {\n    const limit = 2;\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_ALL_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n      limit,\n    });\n\n    const generatedFiles = fs.readdirSync(JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH);\n    expect(generatedFiles.length).toBe(limit);\n  });\n\n  it('convertMetadataObjectsToJsonFiles should complete without errors using CSV with only required fields filled', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_ONLY_REQUIRED_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it('convertMetadataObjectsToJsonFiles should complete without errors using CSV with only required fields and headers filled', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_ONLY_REQUIRED_FIELDS_AND_HEADERS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it('convertMetadataObjectsToJsonFiles should return errors for missing required fields in CSV', async () => {\n    const csvParsedRows = await readCSVFile(CSV_EXAMPLE_WITH_MISSING_REQUIRED_FIELDS);\n    const metadataObjects = parseCSVRowsToMetadataObjects({\n      csvParsedRows,\n      headerAttributes: ATTRIBUTES,\n      headerProperties: PROPERTIES,\n    });\n\n    const result = await convertMetadataObjectsToJsonFiles({\n      metadataObjects,\n      savedJsonFilesLocation: JSON_METADATA_INTEGRATION_TESTS_OUTPUT_FOLDER_PATH,\n    });\n    expect(result.errors).toHaveLength(8);\n  });\n});\n"],"mappings":"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","ignoreList":[]}