{"version":3,"file":"storage-provider-e2e.test.js","names":["_fs","_interopRequireDefault","require","_uploadService","_nftStorageService","_pinataService","_mockStorageService","_e2eConsts","_consts","_exampleNFTMetadata","_awsService","obj","__esModule","default","itif","condition","it","skip","describe","filePath","fileBuffer","blob","beforeAll","fs","readFileSync","Blob","awsAccessKey","awsSecretKey","awsStorageConfig","AWSService","uploadService","UploadService","result","uploadBlobFiles","expect","content","toEqual","url","toBeDefined","toHaveLength","LONG_E2E_TIMEOUT","uploadFilesFromPath","uploadMetadataList","exampleNFTMetadata","nftStorageConfig","NftStorageService","nftStorageApiKey","pinataStorageConfig","PinataService","pinataJwtKey","pinataApiKey","pinataSecretApiKey","mockStorageConfig","MockStorageService"],"sources":["../../../../src/test/e2e/storage-provider-e2e.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport { UploadService } from '../../services/upload-service';\nimport { NftStorageService } from '../../services/file-storages/nft-storage/nft-storage-service';\nimport { PinataService } from '../../services/file-storages/pinata/pinata-service';\nimport { MockStorageService } from '../../services/file-storages/mock-storage/mock-storage-service';\nimport { awsSecretKey, awsAccessKey, nftStorageApiKey, pinataApiKey, pinataJwtKey, pinataSecretApiKey } from './e2e-consts';\nimport { LONG_E2E_TIMEOUT } from '../__mocks__/consts';\nimport { exampleNFTMetadata } from '../__mocks__/exampleNFTMetadata';\nimport { AWSService } from '../../services/file-storages/aws/aws-service';\n\nconst itif = (condition: any) => (condition ? it : it.skip);\n\ndescribe('UploadService E2E Test', () => {\n  let filePath: string;\n  let fileBuffer: Buffer;\n  let blob: Blob;\n\n  beforeAll(() => {\n    filePath = 'src/test/__mocks__/exampleFiles/photo.jpeg';\n    fileBuffer = fs.readFileSync(filePath);\n    blob = new Blob([fileBuffer]);\n  });\n\n  itif(awsAccessKey && awsSecretKey)(\n    'should upload files successfully using AWSService',\n    async () => {\n      const awsStorageConfig = new AWSService(awsAccessKey, awsSecretKey, 'eu-central-1', 'hederatest');\n      const uploadService = new UploadService(awsStorageConfig);\n      const result = await uploadService.uploadBlobFiles([blob]);\n\n      expect(result[0].content).toEqual(blob);\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  itif(awsAccessKey && awsSecretKey)(\n    'should upload file by path successfully using AWSService',\n    async () => {\n      const awsStorageConfig = new AWSService(awsAccessKey, awsSecretKey, 'eu-central-1', 'hederatest');\n      const uploadService = new UploadService(awsStorageConfig);\n      const result = await uploadService.uploadFilesFromPath([filePath]);\n\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  itif(awsAccessKey && awsSecretKey)(\n    'should upload files by path directory successfully using AWSService',\n    async () => {\n      const awsStorageConfig = new AWSService(awsAccessKey, awsSecretKey, 'eu-central-1', 'hederatest');\n      const uploadService = new UploadService(awsStorageConfig);\n      const result = await uploadService.uploadFilesFromPath(['src/test/__mocks__/exampleFiles']);\n\n      expect(result[0].url).toBeDefined();\n      expect(result[1].url).toBeDefined();\n      expect(result).toHaveLength(2);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  itif(awsAccessKey && awsSecretKey)(\n    'should upload metadata successfully using AWSService',\n    async () => {\n      const awsStorageConfig = new AWSService(awsAccessKey, awsSecretKey, 'eu-central-1', 'hederatest');\n      const uploadService = new UploadService(awsStorageConfig);\n      const result = await uploadService.uploadMetadataList([exampleNFTMetadata]);\n\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload files successfully using NftStorageService',\n    async () => {\n      const nftStorageConfig = new NftStorageService('https://api.nft.storage/', 'upload', [nftStorageApiKey]);\n      const uploadService = new UploadService(nftStorageConfig);\n      const result = await uploadService.uploadBlobFiles([blob]);\n\n      expect(result[0].content).toEqual(blob);\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload file by path successfully using NftStorageService',\n    async () => {\n      const nftStorageConfig = new NftStorageService('https://api.nft.storage/', 'upload', [nftStorageApiKey]);\n      const uploadService = new UploadService(nftStorageConfig);\n      const result = await uploadService.uploadFilesFromPath([filePath]);\n\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload files by path directory successfully using NftStorageService',\n    async () => {\n      const nftStorageConfig = new NftStorageService('https://api.nft.storage/', 'upload', [nftStorageApiKey]);\n      const uploadService = new UploadService(nftStorageConfig);\n      const result = await uploadService.uploadFilesFromPath(['src/test/__mocks__/exampleFiles']);\n\n      expect(result[0].url).toBeDefined();\n      expect(result[1].url).toBeDefined();\n      expect(result).toHaveLength(2);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload metadata successfully using NftStorageService',\n    async () => {\n      const nftStorageConfig = new NftStorageService('https://api.nft.storage/', 'upload', [nftStorageApiKey]);\n      const uploadService = new UploadService(nftStorageConfig);\n      const result = await uploadService.uploadMetadataList([exampleNFTMetadata]);\n\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload files successfully using PinataService',\n    async () => {\n      const pinataStorageConfig = new PinataService(pinataJwtKey, pinataApiKey, pinataSecretApiKey);\n      const uploadService = new UploadService(pinataStorageConfig);\n      const result = await uploadService.uploadBlobFiles([blob]);\n\n      expect(result[0].content).toEqual(blob);\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload file by path successfully using PinataService',\n    async () => {\n      const pinataStorageConfig = new PinataService(pinataJwtKey, pinataApiKey, pinataSecretApiKey);\n      const uploadService = new UploadService(pinataStorageConfig);\n      const result = await uploadService.uploadFilesFromPath([filePath]);\n\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload files by path directory successfully using PinataService',\n    async () => {\n      const pinataStorageConfig = new PinataService(pinataJwtKey, pinataApiKey, pinataSecretApiKey);\n      const uploadService = new UploadService(pinataStorageConfig);\n      const result = await uploadService.uploadFilesFromPath(['src/test/__mocks__/exampleFiles']);\n\n      expect(result[0].url).toBeDefined();\n      expect(result[1].url).toBeDefined();\n      expect(result).toHaveLength(2);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload metadata successfully using PinataService',\n    async () => {\n      const pinataStorageConfig = new PinataService(pinataJwtKey, pinataApiKey, pinataSecretApiKey);\n      const uploadService = new UploadService(pinataStorageConfig);\n      const result = await uploadService.uploadMetadataList([exampleNFTMetadata]);\n\n      expect(result[0].url).toBeDefined();\n      expect(result).toHaveLength(1);\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should upload files successfully using MockStorageService',\n    async () => {\n      const mockStorageConfig = new MockStorageService('https://www.mockstorage.com/');\n      const uploadService = new UploadService(mockStorageConfig);\n      const result = await uploadService.uploadBlobFiles([blob]);\n      expect(result).toBeDefined();\n      expect(result[0].url).toEqual('https://www.mockstorage.com/');\n    },\n    LONG_E2E_TIMEOUT\n  );\n});\n"],"mappings":"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","ignoreList":[]}