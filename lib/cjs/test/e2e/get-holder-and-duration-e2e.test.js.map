{"version":3,"file":"get-holder-and-duration-e2e.test.js","names":["_consts","require","_e2eConsts","_sdk","_getHolderAndDuration","afterAll","nftSDK","client","close","tokenId","baseNFT","beforeAll","createCollection","collectionName","collectionSymbol","mintUniqueMetadata","batchSize","metadata","supplyKey","operatorPrivateKey","Promise","resolve","setTimeout","MIRROR_NODE_DELAY","LONG_E2E_TIMEOUT","describe","it","result","getHolderAndDuration","serialNumber","network","holderSinceDate","Date","holderSince","today","expect","getFullYear","toEqual","getMonth","getDate","holder","operatorAccountId","any","String","nftSerial","nftId","NftId","TokenId","fromString","associateTransaction","TokenAssociateTransaction","setAccountId","secondAccountId","setTokenIds","freezeWith","associateSignTx","sign","secondPrivateKey","execute","transaction","TransferTransaction","addNftTransfer","AccountId","signTx","LONG_MIRROR_NODE_DELAY"],"sources":["../../../../src/test/e2e/get-holder-and-duration-e2e.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { LONG_E2E_TIMEOUT, LONG_MIRROR_NODE_DELAY, MIRROR_NODE_DELAY } from '../__mocks__/consts';\nimport { nftSDK, operatorAccountId, operatorPrivateKey, secondAccountId, secondPrivateKey } from './e2e-consts';\nimport { AccountId, NftId, TokenAssociateTransaction, TokenId, TransferTransaction } from '@hashgraph/sdk';\nimport { getHolderAndDuration } from '../../get-holder-and-duration';\n\nafterAll(async () => {\n  nftSDK.client.close();\n});\n\nlet tokenId = '';\nlet baseNFT = [] as any[];\n\nbeforeAll(async () => {\n  tokenId = await nftSDK.createCollection({\n    collectionName: 'test_name',\n    collectionSymbol: 'test_symbol',\n  });\n  baseNFT = await nftSDK.mintUniqueMetadata({\n    tokenId,\n    batchSize: 10,\n    metadata: ['www.youtube.com'],\n    supplyKey: operatorPrivateKey,\n  });\n\n  await new Promise((resolve) => setTimeout(resolve, MIRROR_NODE_DELAY));\n}, LONG_E2E_TIMEOUT);\n\ndescribe('getHolderAndDuration', () => {\n  it(\n    'should return holder and duration of an NFT that has been minted successfully',\n    async () => {\n      const result = await getHolderAndDuration({ tokenId, serialNumber: baseNFT[0].serialNumber, network: 'testnet' });\n      const holderSinceDate = new Date(result.holderSince);\n      const today = new Date();\n\n      expect(holderSinceDate.getFullYear()).toEqual(today.getFullYear());\n      expect(holderSinceDate.getMonth()).toEqual(today.getMonth());\n      expect(holderSinceDate.getDate()).toEqual(today.getDate());\n      expect(result).toEqual({\n        holder: operatorAccountId,\n        holderSince: expect.any(String),\n      });\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should return holder and duration of an NFT that has been transferred to another account successfully',\n    async () => {\n      const nftSerial = baseNFT[0].serialNumber;\n      const nftId = new NftId(TokenId.fromString(tokenId), nftSerial);\n\n      // Associate a token to an account\n      const associateTransaction = new TokenAssociateTransaction()\n        .setAccountId(secondAccountId)\n        .setTokenIds([TokenId.fromString(tokenId)])\n        .freezeWith(nftSDK.client);\n\n      const associateSignTx = await associateTransaction.sign(secondPrivateKey);\n      await associateSignTx.execute(nftSDK.client);\n\n      // Transfer created NFT from first acc to second acc\n      const transaction = new TransferTransaction()\n        .addNftTransfer(nftId, AccountId.fromString(operatorAccountId), AccountId.fromString(secondAccountId))\n        .freezeWith(nftSDK.client);\n      const signTx = await transaction.sign(operatorPrivateKey);\n      await signTx.execute(nftSDK.client);\n\n      await new Promise((resolve) => setTimeout(resolve, LONG_MIRROR_NODE_DELAY));\n\n      const result = await getHolderAndDuration({ tokenId, serialNumber: nftSerial, network: 'testnet' });\n      const holderSinceDate = new Date(result.holderSince);\n      const today = new Date();\n\n      expect(holderSinceDate.getFullYear()).toEqual(today.getFullYear());\n      expect(holderSinceDate.getMonth()).toEqual(today.getMonth());\n      expect(holderSinceDate.getDate()).toEqual(today.getDate());\n      expect(result).toEqual({\n        holder: secondAccountId,\n        holderSince: expect.any(String),\n      });\n    },\n    LONG_E2E_TIMEOUT\n  );\n});\n"],"mappings":"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","ignoreList":[]}