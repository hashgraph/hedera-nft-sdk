{"version":3,"file":"mint-unique-metadata-function-e2e.test.js","names":["_e2eConsts","require","_consts","_sdk","_dictionary","describe","it","tokenId","nftSDK","createCollection","collectionName","collectionSymbol","mintedMetadata","mintUniqueMetadata","batchSize","supplyKey","operatorPrivateKey","pathToMetadataURIsFile","pathToOneLineCSV","expect","toBeDefined","toEqual","content","serialNumber","any","Number","index","metaData","entries","nftInfos","TokenNftInfoQuery","setNftId","NftId","TokenId","fromString","execute","client","metadata","toString","LONG_E2E_TIMEOUT","pathToRowCSV","invalidTokenId","rejects","toThrow","dictionary","hederaActions","cannotParseTokenId"],"sources":["../../../../../src/test/e2e/minting/mint-unique-metadata-function-e2e.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { nftSDK, operatorPrivateKey } from '../e2e-consts';\nimport { LONG_E2E_TIMEOUT, pathToOneLineCSV, pathToRowCSV } from '../../__mocks__/consts';\nimport { NftId, TokenId, TokenNftInfoQuery } from '@hashgraph/sdk';\nimport { dictionary } from '../../../utils/constants/dictionary';\n\ndescribe('mintUniqueMetadata function e2e', () => {\n  it(\n    'Mints unique metadata from csv with one line and commas',\n    async () => {\n      const tokenId = await nftSDK.createCollection({\n        collectionName: 'test_name',\n        collectionSymbol: 'test_symbol',\n      });\n      const mintedMetadata = await nftSDK.mintUniqueMetadata({\n        tokenId,\n        batchSize: 2,\n        supplyKey: operatorPrivateKey,\n        pathToMetadataURIsFile: pathToOneLineCSV,\n      });\n\n      expect(tokenId).toBeDefined();\n      expect(mintedMetadata).toBeDefined();\n      expect(mintedMetadata).toEqual([\n        { content: 'https://www.youtube.com1', serialNumber: expect.any(Number) },\n        { content: 'https://www.youtube.com2', serialNumber: expect.any(Number) },\n      ]);\n\n      for (const [index, metaData] of mintedMetadata.entries()) {\n        const nftInfos = await new TokenNftInfoQuery()\n          .setNftId(new NftId(TokenId.fromString(tokenId), metaData.serialNumber))\n          .execute(nftSDK.client);\n\n        expect(nftInfos[0].metadata!.toString()).toEqual(`https://www.youtube.com${index + 1}`);\n      }\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'Mints unique metadata from csv with rows',\n    async () => {\n      const tokenId = await nftSDK.createCollection({\n        collectionName: 'test_name',\n        collectionSymbol: 'test_symbol',\n      });\n      const mintedMetadata = await nftSDK.mintUniqueMetadata({\n        tokenId,\n        batchSize: 2,\n        supplyKey: operatorPrivateKey,\n        pathToMetadataURIsFile: pathToRowCSV,\n      });\n\n      expect(tokenId).toBeDefined();\n      expect(mintedMetadata).toBeDefined();\n      expect(mintedMetadata).toEqual([\n        { content: 'https://www.youtube.com1', serialNumber: expect.any(Number) },\n        { content: 'https://www.youtube.com2', serialNumber: expect.any(Number) },\n      ]);\n      for (const [index, metaData] of mintedMetadata.entries()) {\n        const nftInfos = await new TokenNftInfoQuery()\n          .setNftId(new NftId(TokenId.fromString(tokenId), metaData.serialNumber))\n          .execute(nftSDK.client);\n\n        expect(nftInfos[0].metadata!.toString()).toEqual(`https://www.youtube.com${index + 1}`);\n      }\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'Mints unique metadata from metadata array props',\n    async () => {\n      const tokenId = await nftSDK.createCollection({\n        collectionName: 'test_name',\n        collectionSymbol: 'test_symbol',\n      });\n      const mintedMetadata = await nftSDK.mintUniqueMetadata({\n        tokenId,\n        batchSize: 2,\n        supplyKey: operatorPrivateKey,\n        metadata: ['https://www.youtube.com1', 'https://www.youtube.com2'],\n      });\n\n      expect(tokenId).toBeDefined();\n      expect(mintedMetadata).toBeDefined();\n      expect(mintedMetadata).toEqual([\n        { content: 'https://www.youtube.com1', serialNumber: expect.any(Number) },\n        { content: 'https://www.youtube.com2', serialNumber: expect.any(Number) },\n      ]);\n      for (const [index, metaData] of mintedMetadata.entries()) {\n        const nftInfos = await new TokenNftInfoQuery()\n          .setNftId(new NftId(TokenId.fromString(tokenId), metaData.serialNumber))\n          .execute(nftSDK.client);\n\n        expect(nftInfos[0].metadata!.toString()).toEqual(`https://www.youtube.com${index + 1}`);\n      }\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it('throws an error when invalid token ID is provided', async () => {\n    const invalidTokenId = 'invalidTokenId';\n\n    await expect(\n      nftSDK.mintUniqueMetadata({\n        tokenId: invalidTokenId,\n        batchSize: 2,\n        supplyKey: operatorPrivateKey,\n        pathToMetadataURIsFile: pathToRowCSV,\n      })\n    ).rejects.toThrow(dictionary.hederaActions.cannotParseTokenId);\n  });\n});\n"],"mappings":"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","ignoreList":[]}