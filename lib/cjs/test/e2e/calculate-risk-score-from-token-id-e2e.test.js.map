{"version":3,"file":"calculate-risk-score-from-token-id-e2e.test.js","names":["_risk","require","_sdk","_e2eConsts","_consts","describe","supplyKey","tokenId","beforeAll","PrivateKey","generateED25519","nftSDK","createCollection","collectionName","collectionSymbol","keys","supply","Promise","resolve","setTimeout","MIRROR_NODE_DELAY","LONG_E2E_TIMEOUT","it","riskResults","calculateRiskScoreFromTokenId","network","expect","riskScore","toBe","riskLevel","customWeights","admin_key","wipe_key","freeze_key","supply_key","kyc_key","pause_key","fee_schedule_key","properties","supply_type_infinite","customRiskLevels","NORISK","LOW","MEDIUM","HIGH"],"sources":["../../../../src/test/e2e/calculate-risk-score-from-token-id-e2e.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { calculateRiskScoreFromTokenId } from '../../risk';\nimport { PrivateKey } from '@hashgraph/sdk';\nimport { nftSDK } from './e2e-consts';\nimport { LONG_E2E_TIMEOUT, MIRROR_NODE_DELAY } from '../__mocks__/consts';\nimport { RiskLevels, Weights } from '../../types/risk';\n\ndescribe('calculateRiskScoreFromTokenIdE2E', () => {\n  let supplyKey: PrivateKey;\n  let tokenId: string;\n  beforeAll(async () => {\n    supplyKey = PrivateKey.generateED25519();\n    tokenId = await nftSDK.createCollection({\n      collectionName: 'test_name_admin',\n      collectionSymbol: 'test_symbol_admin',\n      keys: {\n        supply: supplyKey,\n      },\n    });\n\n    await new Promise((resolve) => setTimeout(resolve, MIRROR_NODE_DELAY));\n  }, LONG_E2E_TIMEOUT);\n\n  it(\n    'should calculate risk score for a given token ID',\n    async () => {\n      const riskResults = await calculateRiskScoreFromTokenId({ tokenId, network: 'testnet' });\n      expect(riskResults.riskScore).toBe(40);\n      expect(riskResults.riskLevel).toBe('LOW');\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should calculate risk score for a given token ID with customWeights parameter',\n    async () => {\n      const customWeights: Weights = {\n        keys: {\n          admin_key: 20,\n          wipe_key: 20,\n          freeze_key: 5,\n          supply_key: 2,\n          kyc_key: 5,\n          pause_key: 5,\n          fee_schedule_key: 4,\n        },\n        properties: {\n          supply_type_infinite: 20,\n        },\n      };\n\n      const riskResults = await calculateRiskScoreFromTokenId({ tokenId, network: 'testnet', customWeights });\n      expect(riskResults.riskScore).toBe(22);\n      expect(riskResults.riskLevel).toBe('LOW');\n    },\n    LONG_E2E_TIMEOUT\n  );\n\n  it(\n    'should calculate risk score for a given token ID with customWeights and customRiskLevels parameters',\n    async () => {\n      const customWeights: Weights = {\n        keys: {\n          admin_key: 200,\n          wipe_key: 200,\n          freeze_key: 50,\n          supply_key: 20,\n          kyc_key: 50,\n          pause_key: 50,\n          fee_schedule_key: 40,\n        },\n        properties: {\n          supply_type_infinite: 200,\n        },\n      };\n\n      const customRiskLevels: RiskLevels = {\n        NORISK: 5,\n        LOW: 60,\n        MEDIUM: 100,\n        HIGH: 200,\n      };\n\n      const riskResults = await calculateRiskScoreFromTokenId({ tokenId, network: 'testnet', customWeights, customRiskLevels });\n      expect(riskResults.riskScore).toBe(220);\n      expect(riskResults.riskLevel).toBe('HIGH');\n    },\n    LONG_E2E_TIMEOUT\n  );\n});\n"],"mappings":"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","ignoreList":[]}