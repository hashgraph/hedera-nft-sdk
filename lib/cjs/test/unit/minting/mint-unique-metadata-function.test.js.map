{"version":3,"file":"mint-unique-metadata-function.test.js","names":["fs","_interopRequireWildcard","require","_mintUniqueMetadataFunction","_consts","_mintToken","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","jest","mock","describe","beforeEach","clearAllMocks","it","mockClient","supplyKey","myPrivateKey","mockReadStream","pipe","fn","mockReturnThis","on","mockImplementation","event","handler","createReadStream","mockReturnValue","mintToken","mockResolvedValueOnce","serials","Array","from","length","_","toNumber","input","client","tokenId","batchSize","pathToMetadataURIsFile","result","mintUniqueMetadataFunction","expect","toEqual","content","serialNumber","toHaveBeenCalledWith","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","metadataArray"],"sources":["../../../../../src/test/unit/minting/mint-unique-metadata-function.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport * as fs from 'fs';\nimport { MintUniqueTokenType } from '../../../types/mint-token';\nimport { mintUniqueMetadataFunction } from '../../../nftSDKFunctions/mint-unique-metadata-function';\nimport { Client } from '@hashgraph/sdk';\nimport { myPrivateKey } from '../../__mocks__/consts';\nimport { mintToken } from '../../../nftSDKFunctions/mint-token';\n\ninterface MockReadStream {\n  pipe: jest.Mock;\n  on: jest.Mock;\n}\n\njest.mock('fs');\njest.mock('csv-parser');\njest.mock('../../../nftSDKFunctions/mint-token');\n\ndescribe('mintUniqueMetadataFunction', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should return success metadata when given valid input from file path', async () => {\n    const mockClient = {} as Client;\n    const supplyKey = myPrivateKey;\n\n    const mockReadStream: MockReadStream = {\n      pipe: jest.fn().mockReturnThis(),\n      on: jest.fn().mockImplementation(function (event, handler) {\n        if (event === 'data') {\n          handler({ '0': 'url1,url2' });\n        }\n        if (event === 'end') {\n          handler();\n        }\n\n        return mockReadStream;\n      }),\n    };\n    (fs.createReadStream as jest.Mock).mockReturnValue(mockReadStream);\n\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 2 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    const input: MintUniqueTokenType = {\n      client: mockClient,\n      tokenId: '0.0.123',\n      batchSize: 5,\n      pathToMetadataURIsFile: 'mockPath',\n      supplyKey: supplyKey,\n    };\n\n    const result = await mintUniqueMetadataFunction(input);\n\n    expect(result).toEqual([\n      { content: 'url1', serialNumber: 1 },\n      { content: 'url2', serialNumber: 2 },\n    ]);\n    expect(fs.createReadStream).toHaveBeenCalledWith('mockPath');\n    expect(mintToken).toHaveBeenCalledTimes(1);\n    expect(mintToken).toHaveBeenNthCalledWith(1, ['url1', 'url2'], '0.0.123', supplyKey, {});\n  });\n\n  it('should return success metadata when given valid input from array', async () => {\n    const mockClient = {} as Client;\n    const supplyKey = myPrivateKey;\n\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 2 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    const input: MintUniqueTokenType = {\n      client: mockClient,\n      tokenId: '0.0.123',\n      batchSize: 5,\n      supplyKey: supplyKey,\n      metadataArray: ['url5', 'url3'],\n    };\n\n    const result = await mintUniqueMetadataFunction(input);\n\n    expect(result).toEqual([\n      { content: 'url5', serialNumber: 1 },\n      { content: 'url3', serialNumber: 2 },\n    ]);\n    expect(mintToken).toHaveBeenCalledTimes(1);\n    expect(mintToken).toHaveBeenNthCalledWith(1, ['url5', 'url3'], '0.0.123', supplyKey, {});\n  });\n});\n"],"mappings":"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","ignoreList":[]}