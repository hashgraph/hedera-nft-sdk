{"version":3,"file":"mint-shared-metadata-function.test.js","names":["_mintSharedMetadataFunction","require","_mintToken","_consts","_dictionary","jest","mock","mintToken","fn","amount","Promise","resolve","serials","Array","from","length","_","i","beforeEach","resetAllMocks","describe","it","mockResolvedValueOnce","toNumber","result","mintSharedMetadataFunction","client","MOCK_CLIENT","metaData","MOCK_META_DATA","tokenId","MOCK_TOKEN_ID","supplyKey","MOCK_SUPPLY_KEY","batchSize","expect","toHaveLength","toEqual","arrayContaining","content","serialNumber","calls","toBe","Math","ceil","rejects","toThrow","dictionary","hederaActions","minBatchSize","maxBatchSize","metadataRequired","cannotParseTokenId"],"sources":["../../../../../src/test/unit/minting/mint-shared-metadata-function.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { mintSharedMetadataFunction } from '../../../nftSDKFunctions/mint-shared-metadata-function';\nimport { mintToken } from '../../../nftSDKFunctions/mint-token';\nimport { MOCK_CLIENT, MOCK_META_DATA, MOCK_TOKEN_ID, MOCK_SUPPLY_KEY } from '../../__mocks__/consts';\nimport { dictionary } from '../../../utils/constants/dictionary';\n\njest.mock('../../../nftSDKFunctions/mint-token', () => ({\n  mintToken: jest.fn((amount) => {\n    return Promise.resolve({\n      serials: Array.from({ length: amount }, (_, i) => i + 1),\n    });\n  }),\n}));\n\nbeforeEach(() => {\n  jest.resetAllMocks();\n});\n\ndescribe('mintSharedMetadataFunction', () => {\n  it('should return correct metadata', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 10 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    const result = await mintSharedMetadataFunction({\n      client: MOCK_CLIENT,\n      metaData: MOCK_META_DATA,\n      tokenId: MOCK_TOKEN_ID,\n      supplyKey: MOCK_SUPPLY_KEY,\n      amount: 10,\n      batchSize: 2,\n    });\n\n    expect(result).toHaveLength(10);\n    expect(result).toEqual(expect.arrayContaining([{ content: MOCK_META_DATA, serialNumber: 1 }]));\n    expect((mintToken as jest.Mock).mock.calls.length).toBe(Math.ceil(10 / 2));\n  });\n\n  it('should handle amount less than batchSize correctly', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 1 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    const result = await mintSharedMetadataFunction({\n      client: MOCK_CLIENT,\n      metaData: MOCK_META_DATA,\n      tokenId: MOCK_TOKEN_ID,\n      supplyKey: MOCK_SUPPLY_KEY,\n      amount: 1,\n      batchSize: 2,\n    });\n\n    expect(result).toEqual(expect.arrayContaining([{ content: MOCK_META_DATA, serialNumber: 1 }]));\n    expect((mintToken as jest.Mock).mock.calls.length).toBe(Math.ceil(1 / 2));\n  });\n\n  it('should handle batchSize of 1 correctly', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 1 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    const result = await mintSharedMetadataFunction({\n      client: MOCK_CLIENT,\n      metaData: MOCK_META_DATA,\n      tokenId: MOCK_TOKEN_ID,\n      supplyKey: MOCK_SUPPLY_KEY,\n      amount: 1,\n      batchSize: 1,\n    });\n\n    expect(result).toEqual(expect.arrayContaining([{ content: MOCK_META_DATA, serialNumber: 1 }]));\n    expect((mintToken as jest.Mock).mock.calls.length).toBe(Math.ceil(1 / 1));\n  });\n\n  it('should handle batchSize of 10 correctly', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 10 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    const result = await mintSharedMetadataFunction({\n      client: MOCK_CLIENT,\n      metaData: MOCK_META_DATA,\n      tokenId: MOCK_TOKEN_ID,\n      supplyKey: MOCK_SUPPLY_KEY,\n      amount: 10,\n      batchSize: 10,\n    });\n    expect(result).toHaveLength(10);\n    expect(result).toEqual(expect.arrayContaining([{ content: MOCK_META_DATA, serialNumber: 1 }]));\n    expect((mintToken as jest.Mock).mock.calls.length).toBe(Math.ceil(10 / 10));\n  });\n\n  it('should handle error when batchSize is lower than 1', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 1 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n    await expect(\n      mintSharedMetadataFunction({\n        client: MOCK_CLIENT,\n        metaData: MOCK_META_DATA,\n        tokenId: MOCK_TOKEN_ID,\n        supplyKey: MOCK_SUPPLY_KEY,\n        amount: 1,\n        batchSize: -1,\n      })\n    ).rejects.toThrow(dictionary.hederaActions.minBatchSize);\n  });\n\n  it('should handle error when batchSize is higher than 10', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 1 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n\n    await expect(\n      mintSharedMetadataFunction({\n        client: MOCK_CLIENT,\n        metaData: MOCK_META_DATA,\n        tokenId: MOCK_TOKEN_ID,\n        supplyKey: MOCK_SUPPLY_KEY,\n        amount: 1,\n        batchSize: 11,\n      })\n    ).rejects.toThrow(dictionary.hederaActions.maxBatchSize);\n  });\n\n  it('should handle error when metaData is not passed', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 1 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n    await expect(\n      mintSharedMetadataFunction({\n        client: MOCK_CLIENT,\n        metaData: '',\n        tokenId: MOCK_TOKEN_ID,\n        supplyKey: MOCK_SUPPLY_KEY,\n        amount: 1,\n        batchSize: 10,\n      })\n    ).rejects.toThrow(dictionary.hederaActions.metadataRequired);\n  });\n\n  it('should handle error when tokenId is not passed', async () => {\n    (mintToken as jest.Mock).mockResolvedValueOnce({\n      serials: Array.from({ length: 1 }, (_, i) => ({\n        toNumber: () => i + 1,\n      })),\n    });\n    await expect(\n      mintSharedMetadataFunction({\n        client: MOCK_CLIENT,\n        metaData: MOCK_META_DATA,\n        tokenId: '',\n        supplyKey: MOCK_SUPPLY_KEY,\n        amount: 1,\n        batchSize: 10,\n      })\n    ).rejects.toThrow(dictionary.hederaActions.cannotParseTokenId);\n  });\n});\n"],"mappings":"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","ignoreList":[]}