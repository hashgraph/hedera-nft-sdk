{"version":3,"file":"json-metadata-from-csv-converter.test.js","names":["_fs","_interopRequireDefault","require","_cloneDeep","_jsonMetadataFromCsvConverter","_saveMetadataObjectAsJsonFiles","_consts","obj","__esModule","default","csvRows","name","creator","description","properties_1","properties_2","attributes_1","attributes_2","attributes_3","objectsFromCSVRows","properties","url","attributes","trait_type","value","describe","it","metadataObjectsFromCSVRows","parseCSVRowsToMetadataObjects","csvParsedRows","cloneDeep","headerAttributes","headerProperties","saveMetadataObjectsAsJsonFiles","JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH","firstJson","JSON","parse","fs","readFileSync","toString","secondJson","rmSync","recursive","force","mkdirSync","expect","toStrictEqual","JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH","result","toEqual"],"sources":["../../../../../src/test/unit/metadata/json-metadata-from-csv-converter.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { CSVRow, MetadataObject } from '../../../types/csv';\nimport { parseCSVRowsToMetadataObjects } from '../../../services/json-metadata-from-csv-converter';\nimport { saveMetadataObjectsAsJsonFiles } from '../../../helpers/save-metadata-object-as-json-files';\nimport {\n  JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH,\n  JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH,\n} from '../../__mocks__/consts';\n\nconst csvRows: CSVRow[] = [\n  {\n    name: '',\n    creator: '',\n    description: '',\n    properties_1: 'url',\n    properties_2: 'url',\n    attributes_1: 'color',\n    attributes_2: 'color',\n    attributes_3: '',\n  },\n  {\n    name: 'Example NFT 1',\n    creator: 'Hedera',\n    description: 'This is an example NFT 2',\n    properties_1: 'Cool collection',\n    properties_2: 'https://nft.com/mycollection/1',\n    attributes_1: 'red',\n    attributes_2: 'long',\n    attributes_3: '',\n  },\n  {\n    name: 'Example NFT 2',\n    creator: 'Hedera',\n    description: 'This is an example NFT 2',\n    properties_1: 'Cool collection',\n    properties_2: 'https://nft.com/mycollection/2',\n    attributes_1: 'black',\n    attributes_2: 'short',\n    attributes_3: '',\n  },\n];\n\nconst objectsFromCSVRows = [\n  {\n    name: 'Example NFT 1',\n    creator: 'Hedera',\n    description: 'This is an example NFT 2',\n    properties: { url: 'https://nft.com/mycollection/1' },\n    attributes: [\n      { trait_type: 'color', value: 'red' },\n      { trait_type: 'color', value: 'long' },\n    ],\n  },\n  {\n    name: 'Example NFT 2',\n    creator: 'Hedera',\n    description: 'This is an example NFT 2',\n    properties: { url: 'https://nft.com/mycollection/2' },\n    attributes: [\n      { trait_type: 'color', value: 'black' },\n      { trait_type: 'color', value: 'short' },\n    ],\n  },\n];\n\ndescribe('JsonMetadataFromCSVConverter', () => {\n  describe('saveMetadataObjectsAsJsonFiles', () => {\n    it('should save content of MetadataObject[] to json files', () => {\n      const metadataObjectsFromCSVRows: MetadataObject[] = parseCSVRowsToMetadataObjects({\n        csvParsedRows: cloneDeep(csvRows),\n        headerAttributes: 'attributes',\n        headerProperties: 'properties',\n      });\n\n      saveMetadataObjectsAsJsonFiles(metadataObjectsFromCSVRows, JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH);\n\n      const firstJson = JSON.parse(fs.readFileSync(`${JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH}/1.json`).toString());\n      const secondJson = JSON.parse(fs.readFileSync(`${JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH}/2.json`).toString());\n\n      fs.rmSync(JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH, {\n        recursive: true,\n        force: true,\n      });\n      fs.mkdirSync(JSON_METADATA_UNIT_TESTS_OUTPUT_METADATA_FOLDER_PATH, { recursive: true });\n\n      expect([firstJson, secondJson]).toStrictEqual(objectsFromCSVRows);\n    });\n\n    it('should create directory if path do not point to directory save content of MetadataObject[] to json files', () => {\n      const metadataObjectsFromCSVRows: MetadataObject[] = parseCSVRowsToMetadataObjects({\n        csvParsedRows: cloneDeep(csvRows),\n        headerAttributes: 'attributes',\n        headerProperties: 'properties',\n      });\n\n      saveMetadataObjectsAsJsonFiles(metadataObjectsFromCSVRows, JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH);\n\n      const firstJson = JSON.parse(fs.readFileSync(`${JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH}/1.json`).toString());\n      const secondJson = JSON.parse(fs.readFileSync(`${JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH}/2.json`).toString());\n\n      fs.rmSync(JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH, {\n        recursive: true,\n        force: true,\n      });\n      fs.mkdirSync(JSON_METADATA_UNIT_TESTS_OUTPUT_NEW_METADATA_FOLDER_PATH, { recursive: true });\n\n      expect([firstJson, secondJson]).toStrictEqual(objectsFromCSVRows);\n    });\n  });\n\n  describe('metadataObjectsFromRows', () => {\n    it('should transform CSV rows into metadata objects', () => {\n      const result = parseCSVRowsToMetadataObjects({\n        csvParsedRows: csvRows,\n        headerAttributes: 'attributes',\n        headerProperties: 'properties',\n      });\n      expect(result).toEqual(objectsFromCSVRows);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}