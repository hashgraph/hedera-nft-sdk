{"version":3,"file":"get-holder-and-duration.test.js","names":["_axios","_interopRequireDefault","require","_dictionary","_consts","_getHolderAndDuration","obj","__esModule","default","jest","mock","describe","mockAxios","beforeEach","axios","it","mockNFTDetails","deleted","mockTransactions","transactions","type","receiver_account_id","consensus_timestamp","links","next","get","mockImplementationOnce","Promise","resolve","data","result","getHolderAndDuration","tokenId","MOCK_TOKEN_ID","serialNumber","MOCK_SERIAL","network","NETWORK","expect","toEqual","holder","holderSince","any","String","rejects","toThrow","dictionary","errors","nftDeleted","nftNoTransactions"],"sources":["../../../../src/test/unit/get-holder-and-duration.test.ts"],"sourcesContent":["import axios from 'axios';\nimport { dictionary } from '../../utils/constants/dictionary';\nimport { MOCK_SERIAL, MOCK_TOKEN_ID, NETWORK } from '../__mocks__/consts';\nimport { getHolderAndDuration } from '../../get-holder-and-duration';\n\njest.mock('axios');\n\ndescribe('getHolderAndDuration', () => {\n  let mockAxios: jest.Mocked<typeof axios>;\n\n  beforeEach(() => {\n    mockAxios = axios as jest.Mocked<typeof axios>;\n  });\n\n  it('should return holder and duration', async () => {\n    const mockNFTDetails = { deleted: false };\n    const mockTransactions = {\n      transactions: [\n        {\n          type: 'CRYPTOTRANSFER',\n          receiver_account_id: 'mockReceiverAccountId',\n          consensus_timestamp: '1695821531.685486177',\n        },\n      ],\n      links: { next: null },\n    };\n\n    mockAxios.get.mockImplementationOnce(() => Promise.resolve({ data: mockNFTDetails }));\n    mockAxios.get.mockImplementationOnce(() => Promise.resolve({ data: mockTransactions }));\n\n    const result = await getHolderAndDuration({\n      tokenId: MOCK_TOKEN_ID,\n      serialNumber: MOCK_SERIAL,\n      network: NETWORK,\n    });\n\n    expect(result).toEqual({\n      holder: 'mockReceiverAccountId',\n      holderSince: expect.any(String),\n    });\n  });\n\n  it('should throw an error when the NFT has been deleted', async () => {\n    const mockNFTDetails = { deleted: true };\n\n    mockAxios.get.mockImplementationOnce(() => Promise.resolve({ data: mockNFTDetails }));\n\n    await expect(\n      getHolderAndDuration({\n        tokenId: MOCK_TOKEN_ID,\n        serialNumber: MOCK_SERIAL,\n        network: NETWORK,\n      })\n    ).rejects.toThrow(dictionary.errors.nftDeleted);\n  });\n\n  it('should throw an error when there are no transactions for the NFT', async () => {\n    const mockNFTDetails = { deleted: false };\n    const mockTransactions = { transactions: [], links: { next: null } };\n\n    mockAxios.get.mockImplementationOnce(() => Promise.resolve({ data: mockNFTDetails }));\n    mockAxios.get.mockImplementationOnce(() => Promise.resolve({ data: mockTransactions }));\n\n    await expect(\n      getHolderAndDuration({\n        tokenId: MOCK_TOKEN_ID,\n        serialNumber: MOCK_SERIAL,\n        network: NETWORK,\n      })\n    ).rejects.toThrow(dictionary.errors.nftNoTransactions);\n  });\n});\n"],"mappings":"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","ignoreList":[]}