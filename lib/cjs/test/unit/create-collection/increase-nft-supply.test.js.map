{"version":3,"file":"increase-nft-supply.test.js","names":["_sdk","require","_axios","_interopRequireDefault","_increaseNftSupply","_validateProps","obj","__esModule","default","jest","mock","mintSharedMetadataFunction","fn","validatePropsForIncreaseNFTSupply","mockedAxios","axios","metadata","mockResponse","btoa","beforeAll","get","mockResolvedValue","data","beforeEach","clearAllMocks","describe","mockNftId","tokenId","TokenId","fromString","serial","_toProtobuf","toBytes","generatedSupplyKey","PrivateKey","generate","mockIncreaseNFTSupplyType","client","network","nftId","amount","batchSize","supplyKey","mirrorNodeUrl","it","increaseNFTSupply","expect","toHaveBeenCalledWith","toHaveBeenCalledTimes","toString","metaData","mockIncreaseNFTSupplyTypeMainnet","undefined","mockIncreaseNFTSupplyTypeTestnet"],"sources":["../../../../../src/test/unit/create-collection/increase-nft-supply.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { Client, PrivateKey, TokenId } from '@hashgraph/sdk';\nimport axios from 'axios';\nimport { increaseNFTSupply } from '../../../nftSDKFunctions/increase-nft-supply';\nimport { IncreaseNFTSupplyType } from '../../../types/mint-token';\nimport { validatePropsForIncreaseNFTSupply } from '../../../utils/validate-props';\nimport { NetworkName } from '@hashgraph/sdk/lib/client/Client';\n\njest.mock('axios');\njest.mock('../../../nftSDKFunctions/mint-shared-metadata-function', () => ({\n  mintSharedMetadataFunction: jest.fn(),\n}));\njest.mock('../../../utils/validate-props', () => ({\n  validatePropsForIncreaseNFTSupply: jest.fn(),\n}));\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\nconst metadata = 'testMetadata';\nconst mockResponse = {\n  //encoding 'testMetadata' as base64 encoded string\n  metadata: btoa(metadata),\n};\nbeforeAll(() => {\n  mockedAxios.get.mockResolvedValue({\n    data: mockResponse,\n  });\n});\n\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n\ndescribe('increaseNFTSupply', () => {\n  const mockNftId = {\n    tokenId: TokenId.fromString('0.0.453'),\n    serial: 1,\n    _toProtobuf: jest.fn(),\n    toBytes: jest.fn(),\n  };\n\n  const generatedSupplyKey = PrivateKey.generate();\n  const mockIncreaseNFTSupplyType: IncreaseNFTSupplyType = {\n    client: {} as Client,\n    network: 'testnet',\n    nftId: mockNftId,\n    amount: 10,\n    batchSize: 5,\n    supplyKey: generatedSupplyKey,\n    mirrorNodeUrl: 'mirrorNodeUrl',\n  };\n\n  it('should validate props before increasing NFT supply', async () => {\n    await increaseNFTSupply(mockIncreaseNFTSupplyType);\n\n    expect(validatePropsForIncreaseNFTSupply as jest.Mock).toHaveBeenCalledWith({\n      amount: 10,\n      batchSize: 5,\n    });\n  });\n\n  it('should increase supply when called with valid props', async () => {\n    await increaseNFTSupply(mockIncreaseNFTSupplyType);\n\n    expect(mockedAxios.get).toHaveBeenCalledWith('mirrorNodeUrl/tokens/0.0.453/nfts/1');\n    expect(mockedAxios.get).toHaveBeenCalledTimes(1);\n    expect(require('../../../nftSDKFunctions/mint-shared-metadata-function').mintSharedMetadataFunction as jest.Mock).toHaveBeenCalledTimes(\n      1\n    );\n  });\n\n  it('should call mintSharedMetadataFunction with the correct parameters', async () => {\n    await increaseNFTSupply(mockIncreaseNFTSupplyType);\n\n    expect(require('../../../nftSDKFunctions/mint-shared-metadata-function').mintSharedMetadataFunction as jest.Mock).toHaveBeenCalledWith({\n      client: mockIncreaseNFTSupplyType.client,\n      tokenId: mockIncreaseNFTSupplyType.nftId.tokenId.toString(),\n      amount: mockIncreaseNFTSupplyType.amount,\n      batchSize: mockIncreaseNFTSupplyType.batchSize,\n      metaData: metadata,\n      supplyKey: mockIncreaseNFTSupplyType.supplyKey,\n    });\n  });\n\n  it('should call passed mirrorNodeUrl when provided', async () => {\n    await increaseNFTSupply(mockIncreaseNFTSupplyType);\n\n    expect(mockedAxios.get).toHaveBeenCalledWith('mirrorNodeUrl/tokens/0.0.453/nfts/1');\n  });\n\n  it('should get correct mirror node url for mainnet', async () => {\n    const mockIncreaseNFTSupplyTypeMainnet = {\n      ...mockIncreaseNFTSupplyType,\n      network: 'mainnet' as NetworkName,\n      mirrorNodeUrl: undefined,\n    };\n\n    await increaseNFTSupply(mockIncreaseNFTSupplyTypeMainnet);\n\n    expect(mockedAxios.get).toHaveBeenCalledWith('https://mainnet-public.mirrornode.hedera.com/api/v1/tokens/0.0.453/nfts/1');\n  });\n\n  it('should get correct mirror node url for testnet', async () => {\n    const mockIncreaseNFTSupplyTypeTestnet = {\n      ...mockIncreaseNFTSupplyType,\n      network: 'testnet' as NetworkName,\n      mirrorNodeUrl: undefined,\n    };\n\n    await increaseNFTSupply(mockIncreaseNFTSupplyTypeTestnet);\n\n    expect(mockedAxios.get).toHaveBeenCalledWith('https://testnet.mirrornode.hedera.com/api/v1/tokens/0.0.453/nfts/1');\n  });\n});\n"],"mappings":"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","ignoreList":[]}