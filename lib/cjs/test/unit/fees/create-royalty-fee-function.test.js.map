{"version":3,"file":"create-royalty-fee-function.test.js","names":["_consts","require","_createRoyaltyFeeFunction","describe","it","royaltyFeeType","collectorAccountId","myAccountId","numerator","denominator","allCollectorsAreExempt","result","createRoyaltyFeeFunction","expect","_numerator","toInt","toEqual","_denominator","fallbackFee","amount","denominatingTokenId","_amount"],"sources":["../../../../../src/test/unit/fees/create-royalty-fee-function.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { RoyaltyFeeType } from '../../../types/fees';\nimport { myAccountId } from '../../__mocks__/consts';\nimport { createRoyaltyFeeFunction } from '../../../nftSDKFunctions/create-royalty-fee-function';\n\ndescribe('createRoyaltyFeeFunction', () => {\n  it('should return the correct numerator and denominator', () => {\n    const royaltyFeeType: RoyaltyFeeType = {\n      collectorAccountId: myAccountId,\n      numerator: 1,\n      denominator: 2,\n      allCollectorsAreExempt: true,\n    };\n\n    const result = createRoyaltyFeeFunction(royaltyFeeType);\n\n    expect(result._numerator.toInt()).toEqual(royaltyFeeType.numerator);\n    expect(result._denominator.toInt()).toEqual(royaltyFeeType.denominator);\n  });\n\n  it('should return the correct fallbackFee when provided', () => {\n    const royaltyFeeType: RoyaltyFeeType = {\n      collectorAccountId: myAccountId,\n      numerator: 1,\n      denominator: 2,\n      fallbackFee: {\n        collectorAccountId: myAccountId,\n        amount: 100,\n        denominatingTokenId: myAccountId,\n        allCollectorsAreExempt: true,\n      },\n      allCollectorsAreExempt: true,\n    };\n\n    const result = createRoyaltyFeeFunction(royaltyFeeType);\n\n    expect(result.fallbackFee?._amount.toInt()).toEqual(royaltyFeeType.fallbackFee?.amount);\n  });\n});\n"],"mappings":";;AAoBA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,yBAAA,GAAAD,OAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKAE,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACzCC,EAAE,CAAC,qDAAqD,EAAE,MAAM;IAC9D,MAAMC,cAA8B,GAAG;MACrCC,kBAAkB,EAAEC,mBAAW;MAC/BC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,sBAAsB,EAAE;IAC1B,CAAC;IAED,MAAMC,MAAM,GAAG,IAAAC,kDAAwB,EAACP,cAAc,CAAC;IAEvDQ,MAAM,CAACF,MAAM,CAACG,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,cAAc,CAACG,SAAS,CAAC;IACnEK,MAAM,CAACF,MAAM,CAACM,YAAY,CAACF,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,cAAc,CAACI,WAAW,CAAC;EACzE,CAAC,CAAC;EAEFL,EAAE,CAAC,qDAAqD,EAAE,MAAM;IAC9D,MAAMC,cAA8B,GAAG;MACrCC,kBAAkB,EAAEC,mBAAW;MAC/BC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdS,WAAW,EAAE;QACXZ,kBAAkB,EAAEC,mBAAW;QAC/BY,MAAM,EAAE,GAAG;QACXC,mBAAmB,EAAEb,mBAAW;QAChCG,sBAAsB,EAAE;MAC1B,CAAC;MACDA,sBAAsB,EAAE;IAC1B,CAAC;IAED,MAAMC,MAAM,GAAG,IAAAC,kDAAwB,EAACP,cAAc,CAAC;IAEvDQ,MAAM,CAACF,MAAM,CAACO,WAAW,EAAEG,OAAO,CAACN,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,cAAc,CAACa,WAAW,EAAEC,MAAM,CAAC;EACzF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}