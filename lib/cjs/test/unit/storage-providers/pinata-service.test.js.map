{"version":3,"file":"pinata-service.test.js","names":["_pinataService","require","_buffer","_axios","_interopRequireDefault","_dictionary","obj","__esModule","default","jest","mock","mockAxios","axios","describe","pinataJwtKey","pinataApiKey","pinataSecretApiKey","beforeEach","mockResponse","data","IpfsHash","create","mockReturnValue","post","mockResolvedValue","it","pinataService","PinataService","mockFile","Blob","Uint8Array","result","uploadFile","expect","toEqual","undefined","toThrow","dictionary","errors","pinataError"],"sources":["../../../../../src/test/unit/storage-providers/pinata-service.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { PinataService } from '../../../services/file-storages/pinata/pinata-service';\nimport { Blob } from 'buffer';\nimport axios from 'axios';\nimport { dictionary } from '../../../utils/constants/dictionary';\n\njest.mock('axios');\nconst mockAxios = axios as jest.Mocked<typeof axios>;\n\ndescribe('PinataService', () => {\n  const pinataJwtKey = 'testJwtKey';\n  const pinataApiKey = 'testApiKey';\n  const pinataSecretApiKey = 'testSecretApiKey';\n\n  beforeEach(() => {\n    const mockResponse = {\n      data: {\n        IpfsHash: 'testHash',\n      },\n    };\n    mockAxios.create.mockReturnValue(mockAxios);\n    mockAxios.post.mockResolvedValue(mockResponse);\n  });\n\n  it('should return the expected string when uploadFile is called', async () => {\n    const pinataService = new PinataService(pinataJwtKey, pinataApiKey, pinataSecretApiKey);\n    const mockFile = new Blob([new Uint8Array([1, 2, 3])]);\n\n    const result = await pinataService.uploadFile(mockFile);\n\n    expect(result).toEqual('ipfs://testHash');\n  });\n\n  it('should return the expected string when only JWTToken is passed', async () => {\n    const pinataService = new PinataService(pinataJwtKey, undefined, undefined);\n    const mockFile = new Blob([new Uint8Array([1, 2, 3])]);\n\n    const result = await pinataService.uploadFile(mockFile);\n\n    expect(result).toEqual('ipfs://testHash');\n  });\n\n  it('should return the expected string when only ApiKey and SecretKey is passed', async () => {\n    const pinataService = new PinataService(undefined, pinataApiKey, pinataSecretApiKey);\n    const mockFile = new Blob([new Uint8Array([1, 2, 3])]);\n\n    const result = await pinataService.uploadFile(mockFile);\n\n    expect(result).toEqual('ipfs://testHash');\n  });\n\n  it('should throw an error when no JWT or ApiKey keys are provided', () => {\n    expect(() => new PinataService(undefined, undefined, 'test')).toThrow(dictionary.errors.pinataError);\n  });\n\n  it('should throw an error when no JWT or SecretKey keys are provided', () => {\n    expect(() => new PinataService(undefined, 'test', undefined)).toThrow(dictionary.errors.pinataError);\n  });\n});\n"],"mappings":"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","ignoreList":[]}