{"version":3,"file":"nft-storage-service.test.js","names":["_buffer","require","_axios","_interopRequireDefault","_nftStorageService","_dictionary","obj","__esModule","default","jest","mock","describe","serviceUrl","uploadUrl","apiKeysList","mockAxios","beforeEach","axios","it","mockFile","Blob","Uint8Array","mockResponse","data","value","cid","create","mockReturnValue","post","mockResolvedValue","result","NftStorageService","uploadFile","expect","toEqual","toThrow","dictionary","errors","noApiKeys"],"sources":["../../../../../src/test/unit/storage-providers/nft-storage-service.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { Blob } from 'buffer';\nimport axios from 'axios';\nimport { NftStorageService } from '../../../services/file-storages/nft-storage/nft-storage-service';\nimport { dictionary } from '../../../utils/constants/dictionary';\n\njest.mock('axios');\n\ndescribe('NftStorageService', () => {\n  const serviceUrl = 'https://api.nft.storage/';\n  const uploadUrl = 'upload';\n  const apiKeysList = ['testKey1', 'testKey2'];\n\n  let mockAxios: jest.Mocked<typeof axios>;\n\n  beforeEach(() => {\n    mockAxios = axios as jest.Mocked<typeof axios>;\n  });\n\n  it('should return the expected string when uploadFile is called', async () => {\n    const mockFile = new Blob([new Uint8Array([1, 2, 3])]);\n    const mockResponse = {\n      data: {\n        value: { cid: 'testCid' },\n      },\n    };\n    mockAxios.create.mockReturnValue(mockAxios);\n    mockAxios.post.mockResolvedValue(mockResponse);\n\n    const result = await new NftStorageService(serviceUrl, uploadUrl, apiKeysList).uploadFile(mockFile);\n\n    expect(result).toEqual('ipfs://testCid');\n  });\n\n  it('should throw an error when no API keys are provided', () => {\n    expect(() => new NftStorageService(serviceUrl, uploadUrl, [])).toThrow(dictionary.errors.noApiKeys);\n  });\n});\n"],"mappings":";;AAmBA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AAAiE,SAAAE,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAtBjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMAG,IAAI,CAACC,IAAI,CAAC,OAAO,CAAC;AAElBC,QAAQ,CAAC,mBAAmB,EAAE,MAAM;EAClC,MAAMC,UAAU,GAAG,0BAA0B;EAC7C,MAAMC,SAAS,GAAG,QAAQ;EAC1B,MAAMC,WAAW,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC;EAE5C,IAAIC,SAAoC;EAExCC,UAAU,CAAC,MAAM;IACfD,SAAS,GAAGE,cAAkC;EAChD,CAAC,CAAC;EAEFC,EAAE,CAAC,6DAA6D,EAAE,YAAY;IAC5E,MAAMC,QAAQ,GAAG,IAAIC,YAAI,CAAC,CAAC,IAAIC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,MAAMC,YAAY,GAAG;MACnBC,IAAI,EAAE;QACJC,KAAK,EAAE;UAAEC,GAAG,EAAE;QAAU;MAC1B;IACF,CAAC;IACDV,SAAS,CAACW,MAAM,CAACC,eAAe,CAACZ,SAAS,CAAC;IAC3CA,SAAS,CAACa,IAAI,CAACC,iBAAiB,CAACP,YAAY,CAAC;IAE9C,MAAMQ,MAAM,GAAG,MAAM,IAAIC,oCAAiB,CAACnB,UAAU,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAACkB,UAAU,CAACb,QAAQ,CAAC;IAEnGc,MAAM,CAACH,MAAM,CAAC,CAACI,OAAO,CAAC,gBAAgB,CAAC;EAC1C,CAAC,CAAC;EAEFhB,EAAE,CAAC,qDAAqD,EAAE,MAAM;IAC9De,MAAM,CAAC,MAAM,IAAIF,oCAAiB,CAACnB,UAAU,EAAEC,SAAS,EAAE,EAAE,CAAC,CAAC,CAACsB,OAAO,CAACC,sBAAU,CAACC,MAAM,CAACC,SAAS,CAAC;EACrG,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}