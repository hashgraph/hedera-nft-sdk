{"version":3,"file":"calculate-rarity-from-on-chain-data.test.js","names":["_rarity","require","_getNftMetadatasFromCollection","_dictionary","nftFromNode","isSuccessful","metadata","name","creator","description","image","type","properties","external_url","url","attributes","trait_type","value","serialNumber","jest","mock","getNftMetadataFromCollection","fn","describe","it","network","tokenId","ipfsGateway","limit","mockResolvedValue","result","calculateRarityFromOnChainData","expect","toStrictEqual","attributeContributions","trait","contribution","totalRarity","NFT","rejects","toThrowError","dictionary","errors","rarity","attributeNotFoundInObject","JSON","stringify"],"sources":["../../../../src/test/unit/calculate-rarity-from-on-chain-data.test.ts"],"sourcesContent":["import { NetworkName } from '@hashgraph/sdk/lib/client/Client';\nimport { calculateRarityFromOnChainData } from '../../rarity';\nimport { getNftMetadataFromCollection } from '../../helpers/get-nft-metadatas-from-collection';\nimport { dictionary } from '../../utils/constants/dictionary';\n\nconst nftFromNode = [\n  {\n    isSuccessful: true,\n    metadata: {\n      name: 'Example NFT 1',\n      creator: 'Hedera',\n      description: 'This is an example NFT 1',\n      image: 'https://nft.com/mycollection/1.jpg',\n      type: 'image/jpeg',\n      properties: {\n        external_url: 'https://nft.com/mycollection/1',\n        url: 'https://nft.com/mycollection/1',\n      },\n      attributes: [\n        { trait_type: 'color', value: 'rgb(0,255,0)' },\n        { trait_type: 'hasPipe', value: 'false' },\n        { trait_type: 'stamina', value: '65' },\n      ],\n    },\n    serialNumber: 5,\n  },\n  {\n    isSuccessful: true,\n    metadata: {\n      name: 'Example NFT 1',\n      creator: 'Hedera',\n      description: 'This is an example NFT 1',\n      image: 'https://nft.com/mycollection/1.jpg',\n      type: 'image/jpeg',\n      properties: {\n        external_url: 'https://nft.com/mycollection/1',\n        url: 'https://nft.com/mycollection/1',\n      },\n      attributes: [\n        { trait_type: 'color', value: 'rgb(0,255,0)' },\n        { trait_type: 'hasPipe', value: 'false' },\n        { trait_type: 'stamina', value: '65' },\n      ],\n    },\n    serialNumber: 4,\n  },\n  {\n    isSuccessful: true,\n    metadata: {\n      creator: 'Hedera3',\n      attributes: [{ trait_type: 'color', value: 'rgb(0,255,0)' }],\n    },\n  },\n];\n\njest.mock('../../helpers/get-nft-metadatas-from-collection', () => ({\n  getNftMetadataFromCollection: jest.fn(),\n}));\n\ndescribe('calculateRarityFromOnChainData', () => {\n  it('should return an array of RarityResult objects', async () => {\n    const network: NetworkName = 'mainnet';\n    const tokenId: string = '0.0.1270555';\n    const ipfsGateway: string = 'https://ipfs.io/ipfs/';\n    const limit: number = 100;\n\n    (getNftMetadataFromCollection as jest.Mock).mockResolvedValue(nftFromNode);\n\n    const result = await calculateRarityFromOnChainData(network, tokenId, ipfsGateway, limit);\n\n    expect(result).toStrictEqual([\n      {\n        attributeContributions: [\n          { trait: 'color', value: 'rgb(0,255,0)', contribution: '33.33' },\n          { trait: 'hasPipe', value: 'false', contribution: '33.33' },\n          { trait: 'stamina', value: '65', contribution: '33.33' },\n        ],\n        totalRarity: '3.00',\n        NFT: 1,\n      },\n      {\n        attributeContributions: [\n          { trait: 'color', value: 'rgb(0,255,0)', contribution: '33.33' },\n          { trait: 'hasPipe', value: 'false', contribution: '33.33' },\n          { trait: 'stamina', value: '65', contribution: '33.33' },\n        ],\n        totalRarity: '3.00',\n        NFT: 2,\n      },\n      {\n        NFT: 3,\n        attributeContributions: [\n          {\n            contribution: '100.00',\n            trait: 'color',\n            value: 'rgb(0,255,0)',\n          },\n        ],\n        totalRarity: '1.00',\n      },\n    ]);\n  });\n\n  it('should thrown error if metadata not contain attributes', async () => {\n    const network: NetworkName = 'mainnet';\n    const tokenId: string = '0.0.1270555';\n    const ipfsGateway: string = 'https://ipfs.io/ipfs/';\n    const limit: number = 100;\n\n    (getNftMetadataFromCollection as jest.Mock).mockResolvedValue([\n      {\n        isSuccessful: true,\n        metadata: {\n          creator: 'Hedera4',\n        },\n      },\n    ]);\n\n    await expect(calculateRarityFromOnChainData(network, tokenId, ipfsGateway, limit)).rejects.toThrowError(\n      dictionary.errors.rarity.attributeNotFoundInObject(JSON.stringify({ creator: 'Hedera4' }))\n    );\n  });\n});\n"],"mappings":"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","ignoreList":[]}