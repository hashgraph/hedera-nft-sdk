{"version":3,"file":"calculate-risk-score-from-token-id.test.js","names":["_risk","require","_axios","_interopRequireDefault","_exampleMetadata","_sdk","obj","__esModule","default","jest","mock","describe","mockAxios","beforeEach","axios","get","mockClear","it","mockResolvedValueOnce","exampleMetadata","riskScore","riskLevel","riskScoreFactors","calculateRiskScoreFromTokenId","tokenId","network","expect","toBe","toEqual","supply_key","customWeights","keys","admin_key","wipe_key","freeze_key","kyc_key","pause_key","fee_schedule_key","properties","supply_type_infinite","customRiskLevels","NORISK","LOW","MEDIUM","HIGH","metadataWithAdminKey","data","PrivateKey","generateED25519","max_supply","total_supply","max_supply_equal_to_total_supply","metadataWihAllKeysProvided"],"sources":["../../../../../src/test/unit/risk-score/calculate-risk-score-from-token-id.test.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2023 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { calculateRiskScoreFromTokenId } from '../../../risk';\nimport axios from 'axios';\nimport { exampleMetadata, metadataWihAllKeysProvided } from '../../__mocks__/exampleMetadata';\nimport { RiskLevels, Weights } from '../../../types/risk';\nimport { PrivateKey } from '@hashgraph/sdk';\n\njest.mock('axios');\n\ndescribe('calculateRiskScoreFromTokenId', () => {\n  let mockAxios: jest.Mocked<typeof axios>;\n\n  beforeEach(() => {\n    mockAxios = axios as jest.Mocked<typeof axios>;\n    mockAxios.get.mockClear();\n  });\n\n  it('should calculate risk score for a given token ID', async () => {\n    mockAxios.get.mockResolvedValueOnce(exampleMetadata);\n\n    const { riskScore, riskLevel, riskScoreFactors } = await calculateRiskScoreFromTokenId({ tokenId: '0.0.123456', network: 'testnet' });\n\n    expect(riskScore).toBe(20);\n    expect(riskLevel).toBe('LOW');\n    expect(riskScoreFactors).toEqual({ supply_key: 20 });\n  });\n\n  it('should calculate risk score for a given token ID with customWeights parameter', async () => {\n    mockAxios.get.mockResolvedValueOnce(exampleMetadata);\n\n    const customWeights: Weights = {\n      keys: {\n        admin_key: 20,\n        wipe_key: 20,\n        freeze_key: 5,\n        supply_key: 2,\n        kyc_key: 5,\n        pause_key: 5,\n        fee_schedule_key: 4,\n      },\n      properties: {\n        supply_type_infinite: 20,\n      },\n    };\n\n    const { riskScore, riskLevel, riskScoreFactors } = await calculateRiskScoreFromTokenId({\n      tokenId: '0.0.123456',\n      network: 'testnet',\n      customWeights,\n    });\n    expect(riskScore).toBe(2);\n    expect(riskLevel).toBe('LOW');\n    expect(riskScoreFactors).toEqual({ supply_key: 2 });\n  });\n\n  it('should calculate risk score for a given token ID with customWeights and customRiskLevels parameters', async () => {\n    mockAxios.get.mockResolvedValueOnce(exampleMetadata);\n\n    const customWeights: Weights = {\n      keys: {\n        admin_key: 500,\n        wipe_key: 500,\n        freeze_key: 100,\n        supply_key: 250,\n        kyc_key: 50,\n        pause_key: 50,\n        fee_schedule_key: 40,\n      },\n      properties: {\n        supply_type_infinite: 200,\n      },\n    };\n\n    const customRiskLevels: RiskLevels = {\n      NORISK: 5,\n      LOW: 60,\n      MEDIUM: 100,\n      HIGH: 200,\n    };\n\n    const { riskScore, riskLevel, riskScoreFactors } = await calculateRiskScoreFromTokenId({\n      tokenId: '0.0.123456',\n      network: 'testnet',\n      customWeights,\n      customRiskLevels,\n    });\n\n    expect(riskScore).toBe(250);\n    expect(riskLevel).toBe('HIGH');\n    expect(riskScoreFactors).toEqual({ supply_key: 250 });\n  });\n\n  it('should calculate risk score for a given token ID with admin_key provided', async () => {\n    const metadataWithAdminKey = {\n      data: {\n        ...exampleMetadata.data,\n        admin_key: PrivateKey.generateED25519(),\n      },\n    };\n    mockAxios.get.mockResolvedValueOnce(metadataWithAdminKey);\n\n    const { riskScore, riskLevel, riskScoreFactors } = await calculateRiskScoreFromTokenId({ tokenId: '0.0.123456', network: 'testnet' });\n\n    expect(riskScore).toBe(220);\n    expect(riskLevel).toBe('HIGH');\n    expect(riskScoreFactors).toEqual({ supply_key: 20, admin_key: 200 });\n  });\n\n  it('should calculate risk score for a given token ID with max_supply and total_supply equal', async () => {\n    const metadataWithAdminKey = {\n      data: {\n        ...exampleMetadata.data,\n        max_supply: 100,\n        total_supply: 100,\n        admin_key: PrivateKey.generateED25519(),\n      },\n    };\n    mockAxios.get.mockResolvedValueOnce(metadataWithAdminKey);\n\n    const { riskScore, riskLevel, riskScoreFactors } = await calculateRiskScoreFromTokenId({ tokenId: '0.0.123456', network: 'testnet' });\n\n    expect(riskScore).toBe(200);\n    expect(riskLevel).toBe('HIGH');\n    expect(riskScoreFactors).toEqual({ supply_key: 20, admin_key: 200, max_supply_equal_to_total_supply: -20 });\n  });\n\n  it('should calculate risk score for a given token ID with all keys provided, customWeights & customRiskLevels parameters', async () => {\n    mockAxios.get.mockResolvedValueOnce(metadataWihAllKeysProvided);\n\n    const customWeights: Weights = {\n      keys: {\n        admin_key: 500,\n        wipe_key: 500,\n        freeze_key: 100,\n        supply_key: 250,\n        kyc_key: 50,\n        pause_key: 50,\n        fee_schedule_key: 50,\n      },\n      properties: {\n        supply_type_infinite: 200,\n      },\n    };\n\n    const customRiskLevels: RiskLevels = {\n      NORISK: 20,\n      LOW: 100,\n      MEDIUM: 500,\n      HIGH: 1000,\n    };\n\n    const { riskScore, riskLevel, riskScoreFactors } = await calculateRiskScoreFromTokenId({\n      tokenId: '0.0.123456',\n      network: 'testnet',\n      customWeights,\n      customRiskLevels,\n    });\n    expect(riskScore).toBe(1500);\n    expect(riskLevel).toBe('HIGH');\n    expect(riskScoreFactors).toEqual({\n      supply_key: 250,\n      kyc_key: 50,\n      admin_key: 500,\n      fee_schedule_key: 50,\n      freeze_key: 100,\n      pause_key: 50,\n      wipe_key: 500,\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}