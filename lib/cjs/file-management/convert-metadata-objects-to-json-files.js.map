{"version":3,"file":"convert-metadata-objects-to-json-files.js","names":["_tokenMetadataValidator","require","_saveMetadataObjectAsJsonFiles","convertMetadataObjectsToJsonFiles","_ref","metadataObjects","savedJsonFilesLocation","limit","allObjectsValid","results","TokenMetadataValidator","validateArrayOfObjects","objectsToProcess","undefined","length","slice","saveMetadataObjectsAsJsonFiles","errorsDetailed","Object","entries","reduce","acc","_ref2","index","errors","push","objectIndex","parseInt","isValid","exports"],"sources":["../../../src/file-management/convert-metadata-objects-to-json-files.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { JsonMetadataFromCSVInterface } from '../types/json-metadata-from-csv';\nimport { TokenMetadataValidator } from '../token-metadata-validator';\nimport { MetadataObject } from '../types/csv';\nimport { saveMetadataObjectsAsJsonFiles } from '../helpers/save-metadata-object-as-json-files';\n\nexport const convertMetadataObjectsToJsonFiles = async ({\n  metadataObjects,\n  savedJsonFilesLocation,\n  limit,\n}: {\n  metadataObjects: MetadataObject[];\n  savedJsonFilesLocation: string;\n  limit?: number;\n}): Promise<JsonMetadataFromCSVInterface> => {\n  const { allObjectsValid, results } = TokenMetadataValidator.validateArrayOfObjects(metadataObjects);\n\n  if (allObjectsValid) {\n    const objectsToProcess = limit !== undefined && limit < metadataObjects.length ? metadataObjects.slice(0, limit) : metadataObjects;\n    saveMetadataObjectsAsJsonFiles(objectsToProcess, savedJsonFilesLocation);\n  }\n\n  // Prepare the error structure while maintaining the index of the metadata object and its error list for greater readability.\n  const errorsDetailed = Object.entries(results).reduce<{ objectIndex: number; errors: string[] }[]>((acc, [index, { errors }]) => {\n    if (errors.length > 0) {\n      acc.push({ objectIndex: parseInt(index), errors });\n    }\n    return acc;\n  }, []);\n\n  return {\n    isValid: allObjectsValid,\n    errors: errorsDetailed,\n    savedJsonFilesLocation,\n  };\n};\n"],"mappings":";;;;;;AAoBA,IAAAA,uBAAA,GAAAC,OAAA;AAEA,IAAAC,8BAAA,GAAAD,OAAA;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMO,MAAME,iCAAiC,GAAG,MAAAC,IAAA,IAQJ;EAAA,IARW;IACtDC,eAAe;IACfC,sBAAsB;IACtBC;EAKF,CAAC,GAAAH,IAAA;EACC,MAAM;IAAEI,eAAe;IAAEC;EAAQ,CAAC,GAAGC,8CAAsB,CAACC,sBAAsB,CAACN,eAAe,CAAC;EAEnG,IAAIG,eAAe,EAAE;IACnB,MAAMI,gBAAgB,GAAGL,KAAK,KAAKM,SAAS,IAAIN,KAAK,GAAGF,eAAe,CAACS,MAAM,GAAGT,eAAe,CAACU,KAAK,CAAC,CAAC,EAAER,KAAK,CAAC,GAAGF,eAAe;IAClI,IAAAW,6DAA8B,EAACJ,gBAAgB,EAAEN,sBAAsB,CAAC;EAC1E;;EAEA;EACA,MAAMW,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACV,OAAO,CAAC,CAACW,MAAM,CAA8C,CAACC,GAAG,EAAAC,KAAA,KAA0B;IAAA,IAAxB,CAACC,KAAK,EAAE;MAAEC;IAAO,CAAC,CAAC,GAAAF,KAAA;IAC1H,IAAIE,MAAM,CAACV,MAAM,GAAG,CAAC,EAAE;MACrBO,GAAG,CAACI,IAAI,CAAC;QAAEC,WAAW,EAAEC,QAAQ,CAACJ,KAAK,CAAC;QAAEC;MAAO,CAAC,CAAC;IACpD;IACA,OAAOH,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLO,OAAO,EAAEpB,eAAe;IACxBgB,MAAM,EAAEP,cAAc;IACtBX;EACF,CAAC;AACH,CAAC;AAACuB,OAAA,CAAA1B,iCAAA,GAAAA,iCAAA","ignoreList":[]}