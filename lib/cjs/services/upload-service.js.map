{"version":3,"file":"upload-service.js","names":["_fs","_interopRequireDefault","require","_filter","_isNull","_map","_dictionary","_errorToMessage","obj","__esModule","default","nonEmptyFiles","file","Blob","size","isFileEmpty","UploadService","constructor","service","uploadFilesFromPath","paths","result","Promise","all","map","path","isDirectory","fs","lstatSync","files","readdirSync","length","Error","dictionary","errors","uploadService","noFiles","filter","existsSync","fileContent","readFileSync","blob","url","uploadFile","content","e","errorToMessage","flat","uploadBlobFiles","fileToUpload","filePath","errorMessage","handleBlobUpload","metadata","noMetadata","JSON","stringify","type","uploadMetadataList","metadatas","metadataUris","metadataUri","isNull","exports"],"sources":["../../../src/services/upload-service.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport fs from 'fs';\nimport filter from 'lodash/filter';\nimport isNull from 'lodash/isNull';\nimport map from 'lodash/map';\nimport { BufferFile } from '../types/buffer-file';\nimport { dictionary } from '../utils/constants/dictionary';\nimport { errorToMessage } from '../helpers/error-to-message';\nimport { NFTMetadata } from '../types/nft-metadata';\nimport { FileStorage } from '../types/file-storage-service';\n\nexport type FileStorageURL = `https://${string}/`;\nexport type FileStorageUploadUrl = string;\ntype UploadServiceReturn = {\n  content: Blob | BufferFile;\n  url: string;\n};\n\nconst nonEmptyFiles = (file: Blob | BufferFile): boolean => {\n  return file instanceof Blob ? file.size > 0 : !file.isFileEmpty;\n};\n\nexport class UploadService {\n  private service: FileStorage;\n\n  constructor(service: FileStorage) {\n    this.service = service;\n  }\n\n  public async uploadFilesFromPath(paths: string[]): Promise<UploadServiceReturn[]> {\n    const result = await Promise.all(\n      paths.map(async (path) => {\n        const isDirectory = fs.lstatSync(path).isDirectory();\n        let files: string[] = [];\n\n        if (isDirectory) {\n          files = fs.readdirSync(path).map((file) => `${path}/${file}`);\n        } else {\n          files = [path];\n        }\n\n        if (files.length < 0) {\n          throw new Error(dictionary.errors.uploadService.noFiles);\n        }\n\n        try {\n          return await Promise.all(\n            map(\n              filter(files, (file) => fs.existsSync(file)),\n              async (file) => {\n                const fileContent = fs.readFileSync(file);\n                const blob = new Blob([fileContent]);\n                // @ts-expect-error Argument of type 'Blob' is assignable to parameter of type 'import(\"buffer\").Blob\n                const url = await this.service.uploadFile(blob);\n\n                return {\n                  content: blob,\n                  url,\n                };\n              }\n            )\n          );\n        } catch (e) {\n          throw new Error(errorToMessage(e));\n        }\n      })\n    );\n\n    return result.flat();\n  }\n\n  public async uploadBlobFiles(files: (Blob | BufferFile)[]): Promise<UploadServiceReturn[]> {\n    if (files.length < 0) {\n      throw new Error(dictionary.errors.uploadService.noFiles);\n    }\n\n    try {\n      return await Promise.all(\n        map(filter(files, nonEmptyFiles), async (file) => {\n          let fileToUpload: Blob | null = null;\n\n          if (file instanceof Blob) {\n            fileToUpload = file;\n          } else {\n            const fileContent = fs.readFileSync(file.filePath);\n\n            fileToUpload = new Blob([fileContent]);\n          }\n\n          // @ts-expect-error Argument of type 'Blob' is assignable to parameter of type 'import(\"buffer\").Blob\n          const url = await this.service.uploadFile(fileToUpload);\n\n          return {\n            content: file,\n            url,\n          };\n        })\n      );\n    } catch (e) {\n      const errorMessage = errorToMessage(e);\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  public async handleBlobUpload(metadata: Partial<NFTMetadata> | NFTMetadata): Promise<UploadServiceReturn | null> {\n    if (!metadata) {\n      throw new Error(dictionary.errors.uploadService.noMetadata);\n    }\n\n    try {\n      const file = new Blob([JSON.stringify(metadata)], { type: 'application/json' });\n      // @ts-expect-error Argument of type 'Blob' is assignable to parameter of type 'import(\"buffer\").Blob\n      const url = await this.service.uploadFile(file);\n\n      return {\n        content: file,\n        url,\n      };\n    } catch (e) {\n      const errorMessage = errorToMessage(e);\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  public async uploadMetadataList(metadatas: NFTMetadata[]): Promise<UploadServiceReturn[]> {\n    const metadataUris = await Promise.all(map(metadatas, async (metadata) => this.handleBlobUpload(metadata)));\n\n    return filter(metadataUris, (metadataUri): metadataUri is UploadServiceReturn => !isNull(metadataUri));\n  }\n}\n"],"mappings":"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","ignoreList":[]}