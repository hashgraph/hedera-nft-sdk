{"version":3,"file":"nft-storage-service.js","names":["_dictionary","require","_axios","_interopRequireDefault","_random","obj","__esModule","default","NftStorageService","serviceUrl","uploadUrl","apiKeysList","constructor","length","Error","dictionary","errors","noApiKeys","instance","axios","create","baseURL","uploadFile","file","key","random","data","value","cid","post","headers","Authorization","exports"],"sources":["../../../../../src/services/file-storages/nft-storage/nft-storage-service.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport type { Blob } from 'buffer';\nimport { dictionary } from '../../../utils/constants/dictionary';\nimport { FileStorageUploadUrl, FileStorageURL } from '../../upload-service';\nimport { FileStorage } from '../../../types/file-storage-service';\nimport axios, { AxiosInstance } from 'axios';\nimport random from 'lodash/random';\n\ninterface NFTStorageUploadResponseValue {\n  cid: string;\n  created: string;\n  type: string;\n  scope: string;\n  files: File[];\n  size: number;\n  name: string;\n  pin?: {\n    cid: string;\n    created: string;\n    size: number;\n    status: string;\n  };\n  deals: unknown[];\n}\n\ninterface NFTStorageUploadResponse {\n  ok: boolean;\n  value: NFTStorageUploadResponseValue;\n}\n\nexport class NftStorageService implements FileStorage {\n  public serviceUrl: FileStorageURL = 'https://api.nft.storage/';\n  public uploadUrl: FileStorageUploadUrl = 'upload';\n  private instance: AxiosInstance;\n  public apiKeysList: string[] = [];\n\n  constructor(serviceUrl: FileStorageURL, uploadUrl: FileStorageUploadUrl, apiKeysList: string[]) {\n    this.serviceUrl = serviceUrl;\n    this.uploadUrl = uploadUrl;\n    this.apiKeysList = apiKeysList;\n\n    if (apiKeysList.length <= 0) {\n      throw new Error(dictionary.errors.noApiKeys);\n    }\n\n    this.instance = axios.create({\n      baseURL: this.serviceUrl,\n    });\n  }\n\n  public async uploadFile(file: Blob): Promise<string> {\n    const key = this.apiKeysList[random(0, this.apiKeysList.length - 1)];\n\n    const {\n      data: {\n        value: { cid },\n      },\n    } = await this.instance.post<NFTStorageUploadResponse>(this.uploadUrl, file, {\n      headers: {\n        Authorization: `Bearer ${key}`,\n      },\n    });\n\n    return `ipfs://${cid}`;\n  }\n}\n"],"mappings":";;;;;;AAoBA,IAAAA,WAAA,GAAAC,OAAA;AAGA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,OAAA,GAAAD,sBAAA,CAAAF,OAAA;AAAmC,SAAAE,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAxBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BO,MAAMG,iBAAiB,CAAwB;EAC7CC,UAAU,GAAmB,0BAA0B;EACvDC,SAAS,GAAyB,QAAQ;EAE1CC,WAAW,GAAa,EAAE;EAEjCC,WAAWA,CAACH,UAA0B,EAAEC,SAA+B,EAAEC,WAAqB,EAAE;IAC9F,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAE9B,IAAIA,WAAW,CAACE,MAAM,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAACC,sBAAU,CAACC,MAAM,CAACC,SAAS,CAAC;IAC9C;IAEA,IAAI,CAACC,QAAQ,GAAGC,cAAK,CAACC,MAAM,CAAC;MAC3BC,OAAO,EAAE,IAAI,CAACZ;IAChB,CAAC,CAAC;EACJ;EAEA,MAAaa,UAAUA,CAACC,IAAU,EAAmB;IACnD,MAAMC,GAAG,GAAG,IAAI,CAACb,WAAW,CAAC,IAAAc,eAAM,EAAC,CAAC,EAAE,IAAI,CAACd,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAEpE,MAAM;MACJa,IAAI,EAAE;QACJC,KAAK,EAAE;UAAEC;QAAI;MACf;IACF,CAAC,GAAG,MAAM,IAAI,CAACV,QAAQ,CAACW,IAAI,CAA2B,IAAI,CAACnB,SAAS,EAAEa,IAAI,EAAE;MAC3EO,OAAO,EAAE;QACPC,aAAa,EAAG,UAASP,GAAI;MAC/B;IACF,CAAC,CAAC;IAEF,OAAQ,UAASI,GAAI,EAAC;EACxB;AACF;AAACI,OAAA,CAAAxB,iBAAA,GAAAA,iBAAA","ignoreList":[]}