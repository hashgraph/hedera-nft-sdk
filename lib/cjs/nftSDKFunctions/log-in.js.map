{"version":3,"file":"log-in.js","names":["_sdk","require","_dictionary","logIn","_ref","myAccountId","myPrivateKey","network","localNode","localMirrorNode","Error","dictionary","createCollection","myAccountIdRequired","myPrivateKeyRequired","handleLocalNode","Client","forName","setOperator","exports","config","client","forNetwork","forLocalNode","setMirrorNetwork"],"sources":["../../../src/nftSDKFunctions/log-in.ts"],"sourcesContent":["/*-\n *\n * Hedera NFT SDK\n *\n * Copyright (C) 2024 Hedera Hashgraph, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { Client } from '@hashgraph/sdk';\nimport { LogInType } from '../types/login';\nimport { dictionary } from '../utils/constants/dictionary';\n\nexport const logIn = ({ myAccountId, myPrivateKey, network, localNode, localMirrorNode }: LogInType): Client => {\n  if (!myAccountId) throw new Error(dictionary.createCollection.myAccountIdRequired);\n  if (!myPrivateKey) throw new Error(dictionary.createCollection.myPrivateKeyRequired);\n\n  if (network == 'localnode') {\n    return handleLocalNode({ myAccountId, myPrivateKey, network, localNode, localMirrorNode });\n  } else {\n    return Client.forName(network).setOperator(myAccountId, myPrivateKey);\n  }\n};\n\nconst handleLocalNode = (config: LogInType): Client => {\n  const client = config.localNode ? Client.forNetwork(config.localNode) : Client.forLocalNode();\n\n  if (config.localMirrorNode) {\n    client.setMirrorNetwork(config.localMirrorNode);\n  }\n\n  client.setOperator(config.myAccountId, config.myPrivateKey);\n  return client;\n};\n"],"mappings":";;;;;;AAmBA,IAAAA,IAAA,GAAAC,OAAA;AAEA,IAAAC,WAAA,GAAAD,OAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKO,MAAME,KAAK,GAAGC,IAAA,IAA2F;EAAA,IAA1F;IAAEC,WAAW;IAAEC,YAAY;IAAEC,OAAO;IAAEC,SAAS;IAAEC;EAA2B,CAAC,GAAAL,IAAA;EACjG,IAAI,CAACC,WAAW,EAAE,MAAM,IAAIK,KAAK,CAACC,sBAAU,CAACC,gBAAgB,CAACC,mBAAmB,CAAC;EAClF,IAAI,CAACP,YAAY,EAAE,MAAM,IAAII,KAAK,CAACC,sBAAU,CAACC,gBAAgB,CAACE,oBAAoB,CAAC;EAEpF,IAAIP,OAAO,IAAI,WAAW,EAAE;IAC1B,OAAOQ,eAAe,CAAC;MAAEV,WAAW;MAAEC,YAAY;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAgB,CAAC,CAAC;EAC5F,CAAC,MAAM;IACL,OAAOO,WAAM,CAACC,OAAO,CAACV,OAAO,CAAC,CAACW,WAAW,CAACb,WAAW,EAAEC,YAAY,CAAC;EACvE;AACF,CAAC;AAACa,OAAA,CAAAhB,KAAA,GAAAA,KAAA;AAEF,MAAMY,eAAe,GAAIK,MAAiB,IAAa;EACrD,MAAMC,MAAM,GAAGD,MAAM,CAACZ,SAAS,GAAGQ,WAAM,CAACM,UAAU,CAACF,MAAM,CAACZ,SAAS,CAAC,GAAGQ,WAAM,CAACO,YAAY,CAAC,CAAC;EAE7F,IAAIH,MAAM,CAACX,eAAe,EAAE;IAC1BY,MAAM,CAACG,gBAAgB,CAACJ,MAAM,CAACX,eAAe,CAAC;EACjD;EAEAY,MAAM,CAACH,WAAW,CAACE,MAAM,CAACf,WAAW,EAAEe,MAAM,CAACd,YAAY,CAAC;EAC3D,OAAOe,MAAM;AACf,CAAC","ignoreList":[]}